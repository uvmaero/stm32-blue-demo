
lcd_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be0  08005be0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005be0  08005be0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be0  08005be0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000010ac  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010bc  200010bc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001189c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd8  00000000  00000000  000318dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  000344b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  00035178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f069  00000000  00000000  00035d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffc4  00000000  00000000  00054d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2829  00000000  00000000  00064d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00117556  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003288  00000000  00000000  001175ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b44 	.word	0x08005b44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005b44 	.word	0x08005b44

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	4608      	mov	r0, r1
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	4603      	mov	r3, r0
 8000214:	70fb      	strb	r3, [r7, #3]
 8000216:	460b      	mov	r3, r1
 8000218:	70bb      	strb	r3, [r7, #2]
 800021a:	4613      	mov	r3, r2
 800021c:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8000222:	4a4f      	ldr	r2, [pc, #316]	; (8000360 <lcdInit+0x15c>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	b2da      	uxtb	r2, r3
 800022e:	4b4c      	ldr	r3, [pc, #304]	; (8000360 <lcdInit+0x15c>)
 8000230:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8000232:	4a4b      	ldr	r2, [pc, #300]	; (8000360 <lcdInit+0x15c>)
 8000234:	78bb      	ldrb	r3, [r7, #2]
 8000236:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000238:	4a49      	ldr	r2, [pc, #292]	; (8000360 <lcdInit+0x15c>)
 800023a:	787b      	ldrb	r3, [r7, #1]
 800023c:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 800023e:	4b48      	ldr	r3, [pc, #288]	; (8000360 <lcdInit+0x15c>)
 8000240:	2208      	movs	r2, #8
 8000242:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000244:	4b47      	ldr	r3, [pc, #284]	; (8000364 <lcdInit+0x160>)
 8000246:	2234      	movs	r2, #52	; 0x34
 8000248:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800024a:	4b46      	ldr	r3, [pc, #280]	; (8000364 <lcdInit+0x160>)
 800024c:	781a      	ldrb	r2, [r3, #0]
 800024e:	4b45      	ldr	r3, [pc, #276]	; (8000364 <lcdInit+0x160>)
 8000250:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000252:	4b44      	ldr	r3, [pc, #272]	; (8000364 <lcdInit+0x160>)
 8000254:	2230      	movs	r2, #48	; 0x30
 8000256:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8000258:	2300      	movs	r3, #0
 800025a:	75fb      	strb	r3, [r7, #23]
 800025c:	e030      	b.n	80002c0 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800025e:	4b40      	ldr	r3, [pc, #256]	; (8000360 <lcdInit+0x15c>)
 8000260:	6818      	ldr	r0, [r3, #0]
 8000262:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <lcdInit+0x15c>)
 8000264:	799b      	ldrb	r3, [r3, #6]
 8000266:	b299      	uxth	r1, r3
 8000268:	2303      	movs	r3, #3
 800026a:	4a3e      	ldr	r2, [pc, #248]	; (8000364 <lcdInit+0x160>)
 800026c:	f001 fa64 	bl	8001738 <HAL_I2C_Master_Transmit_DMA>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <lcdInit+0x76>
            return false;
 8000276:	2300      	movs	r3, #0
 8000278:	e06d      	b.n	8000356 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 800027a:	f004 fdc1 	bl	8004e00 <xTaskGetTickCount>
 800027e:	4603      	mov	r3, r0
 8000280:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000282:	e002      	b.n	800028a <lcdInit+0x86>
            vTaskDelay(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f004 fc7d 	bl	8004b84 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800028a:	4b35      	ldr	r3, [pc, #212]	; (8000360 <lcdInit+0x15c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fc25 	bl	8001ade <HAL_I2C_GetState>
 8000294:	4603      	mov	r3, r0
 8000296:	2b20      	cmp	r3, #32
 8000298:	d1f4      	bne.n	8000284 <lcdInit+0x80>
        }

        if (i == 2) {
 800029a:	7dfb      	ldrb	r3, [r7, #23]
 800029c:	2b02      	cmp	r3, #2
 800029e:	d106      	bne.n	80002ae <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 80002a0:	f107 0310 	add.w	r3, r7, #16
 80002a4:	2101      	movs	r1, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f004 fbee 	bl	8004a88 <vTaskDelayUntil>
 80002ac:	e005      	b.n	80002ba <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	2105      	movs	r1, #5
 80002b4:	4618      	mov	r0, r3
 80002b6:	f004 fbe7 	bl	8004a88 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 80002ba:	7dfb      	ldrb	r3, [r7, #23]
 80002bc:	3301      	adds	r3, #1
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	7dfb      	ldrb	r3, [r7, #23]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d9cb      	bls.n	800025e <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80002c6:	4b27      	ldr	r3, [pc, #156]	; (8000364 <lcdInit+0x160>)
 80002c8:	222c      	movs	r2, #44	; 0x2c
 80002ca:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <lcdInit+0x160>)
 80002ce:	781a      	ldrb	r2, [r3, #0]
 80002d0:	4b24      	ldr	r3, [pc, #144]	; (8000364 <lcdInit+0x160>)
 80002d2:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <lcdInit+0x160>)
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80002da:	4b21      	ldr	r3, [pc, #132]	; (8000360 <lcdInit+0x15c>)
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	4b20      	ldr	r3, [pc, #128]	; (8000360 <lcdInit+0x15c>)
 80002e0:	799b      	ldrb	r3, [r3, #6]
 80002e2:	b299      	uxth	r1, r3
 80002e4:	2303      	movs	r3, #3
 80002e6:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <lcdInit+0x160>)
 80002e8:	f001 fa26 	bl	8001738 <HAL_I2C_Master_Transmit_DMA>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d004      	beq.n	80002fc <lcdInit+0xf8>
        return false;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e02f      	b.n	8000356 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f004 fc44 	bl	8004b84 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <lcdInit+0x15c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fbec 	bl	8001ade <HAL_I2C_GetState>
 8000306:	4603      	mov	r3, r0
 8000308:	2b20      	cmp	r3, #32
 800030a:	d1f4      	bne.n	80002f6 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 800030c:	7bfb      	ldrb	r3, [r7, #15]
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	b2db      	uxtb	r3, r3
 8000314:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <lcdInit+0x15c>)
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d904      	bls.n	8000328 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	b2db      	uxtb	r3, r3
 8000326:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000328:	f107 030f 	add.w	r3, r7, #15
 800032c:	4619      	mov	r1, r3
 800032e:	2000      	movs	r0, #0
 8000330:	f000 f980 	bl	8000634 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8000334:	2101      	movs	r1, #1
 8000336:	2001      	movs	r0, #1
 8000338:	f000 f816 	bl	8000368 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 800033c:	2101      	movs	r1, #1
 800033e:	2007      	movs	r0, #7
 8000340:	f000 f812 	bl	8000368 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8000344:	2101      	movs	r1, #1
 8000346:	2002      	movs	r0, #2
 8000348:	f000 f80e 	bl	8000368 <lcdCommand>
    lcdCursorHome();
 800034c:	2101      	movs	r1, #1
 800034e:	2005      	movs	r0, #5
 8000350:	f000 f80a 	bl	8000368 <lcdCommand>

    return true;
 8000354:	2301      	movs	r3, #1
}
 8000356:	4618      	mov	r0, r3
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000288 	.word	0x20000288
 8000364:	20000280 	.word	0x20000280

08000368 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d06e      	beq.n	8000460 <lcdCommand+0xf8>
 8000382:	2b01      	cmp	r3, #1
 8000384:	f040 80b4 	bne.w	80004f0 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	3b01      	subs	r3, #1
 800038c:	2b07      	cmp	r3, #7
 800038e:	d864      	bhi.n	800045a <lcdCommand+0xf2>
 8000390:	a201      	add	r2, pc, #4	; (adr r2, 8000398 <lcdCommand+0x30>)
 8000392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000396:	bf00      	nop
 8000398:	080003b9 	.word	0x080003b9
 800039c:	080003e9 	.word	0x080003e9
 80003a0:	080003c9 	.word	0x080003c9
 80003a4:	080003d9 	.word	0x080003d9
 80003a8:	0800040d 	.word	0x0800040d
 80003ac:	08000441 	.word	0x08000441
 80003b0:	08000431 	.word	0x08000431
 80003b4:	0800044b 	.word	0x0800044b
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80003b8:	4b61      	ldr	r3, [pc, #388]	; (8000540 <lcdCommand+0x1d8>)
 80003ba:	7a1b      	ldrb	r3, [r3, #8]
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b5f      	ldr	r3, [pc, #380]	; (8000540 <lcdCommand+0x1d8>)
 80003c4:	721a      	strb	r2, [r3, #8]
                    break;
 80003c6:	e04a      	b.n	800045e <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80003c8:	4b5d      	ldr	r3, [pc, #372]	; (8000540 <lcdCommand+0x1d8>)
 80003ca:	7a1b      	ldrb	r3, [r3, #8]
 80003cc:	f043 0302 	orr.w	r3, r3, #2
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b5b      	ldr	r3, [pc, #364]	; (8000540 <lcdCommand+0x1d8>)
 80003d4:	721a      	strb	r2, [r3, #8]
                    break;
 80003d6:	e042      	b.n	800045e <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80003d8:	4b59      	ldr	r3, [pc, #356]	; (8000540 <lcdCommand+0x1d8>)
 80003da:	7a1b      	ldrb	r3, [r3, #8]
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b57      	ldr	r3, [pc, #348]	; (8000540 <lcdCommand+0x1d8>)
 80003e4:	721a      	strb	r2, [r3, #8]
                    break;
 80003e6:	e03a      	b.n	800045e <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80003e8:	2301      	movs	r3, #1
 80003ea:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80003ec:	f107 030f 	add.w	r3, r7, #15
 80003f0:	4619      	mov	r1, r3
 80003f2:	2000      	movs	r0, #0
 80003f4:	f000 f91e 	bl	8000634 <lcdWriteByte>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <lcdCommand+0x9a>
                        return false;
 80003fe:	2300      	movs	r3, #0
 8000400:	e09a      	b.n	8000538 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8000402:	2002      	movs	r0, #2
 8000404:	f004 fbbe 	bl	8004b84 <vTaskDelay>
                        return true;
 8000408:	2301      	movs	r3, #1
 800040a:	e095      	b.n	8000538 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 800040c:	2302      	movs	r3, #2
 800040e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000410:	f107 030f 	add.w	r3, r7, #15
 8000414:	4619      	mov	r1, r3
 8000416:	2000      	movs	r0, #0
 8000418:	f000 f90c 	bl	8000634 <lcdWriteByte>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d101      	bne.n	8000426 <lcdCommand+0xbe>
                        return false;
 8000422:	2300      	movs	r3, #0
 8000424:	e088      	b.n	8000538 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8000426:	2002      	movs	r0, #2
 8000428:	f004 fbac 	bl	8004b84 <vTaskDelay>
                        return true;
 800042c:	2301      	movs	r3, #1
 800042e:	e083      	b.n	8000538 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000430:	4b43      	ldr	r3, [pc, #268]	; (8000540 <lcdCommand+0x1d8>)
 8000432:	7a5b      	ldrb	r3, [r3, #9]
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <lcdCommand+0x1d8>)
 800043c:	725a      	strb	r2, [r3, #9]
                    break;
 800043e:	e00e      	b.n	800045e <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8000440:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <lcdCommand+0x1d8>)
 8000442:	7a5a      	ldrb	r2, [r3, #9]
 8000444:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <lcdCommand+0x1d8>)
 8000446:	725a      	strb	r2, [r3, #9]
                    break;
 8000448:	e009      	b.n	800045e <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800044a:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <lcdCommand+0x1d8>)
 800044c:	7a5b      	ldrb	r3, [r3, #9]
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <lcdCommand+0x1d8>)
 8000456:	725a      	strb	r2, [r3, #9]
                    break;
 8000458:	e001      	b.n	800045e <lcdCommand+0xf6>

                default:
                    return false;
 800045a:	2300      	movs	r3, #0
 800045c:	e06c      	b.n	8000538 <lcdCommand+0x1d0>
            }

            break;
 800045e:	e049      	b.n	80004f4 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	3b01      	subs	r3, #1
 8000464:	2b07      	cmp	r3, #7
 8000466:	d840      	bhi.n	80004ea <lcdCommand+0x182>
 8000468:	a201      	add	r2, pc, #4	; (adr r2, 8000470 <lcdCommand+0x108>)
 800046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046e:	bf00      	nop
 8000470:	08000491 	.word	0x08000491
 8000474:	080004eb 	.word	0x080004eb
 8000478:	080004a1 	.word	0x080004a1
 800047c:	080004b1 	.word	0x080004b1
 8000480:	080004eb 	.word	0x080004eb
 8000484:	080004d1 	.word	0x080004d1
 8000488:	080004c1 	.word	0x080004c1
 800048c:	080004db 	.word	0x080004db
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8000490:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <lcdCommand+0x1d8>)
 8000492:	7a1b      	ldrb	r3, [r3, #8]
 8000494:	f023 0304 	bic.w	r3, r3, #4
 8000498:	b2da      	uxtb	r2, r3
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <lcdCommand+0x1d8>)
 800049c:	721a      	strb	r2, [r3, #8]
                    break;
 800049e:	e026      	b.n	80004ee <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <lcdCommand+0x1d8>)
 80004a2:	7a1b      	ldrb	r3, [r3, #8]
 80004a4:	f023 0302 	bic.w	r3, r3, #2
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <lcdCommand+0x1d8>)
 80004ac:	721a      	strb	r2, [r3, #8]
                    break;
 80004ae:	e01e      	b.n	80004ee <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <lcdCommand+0x1d8>)
 80004b2:	7a1b      	ldrb	r3, [r3, #8]
 80004b4:	f023 0301 	bic.w	r3, r3, #1
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b21      	ldr	r3, [pc, #132]	; (8000540 <lcdCommand+0x1d8>)
 80004bc:	721a      	strb	r2, [r3, #8]
                    break;
 80004be:	e016      	b.n	80004ee <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <lcdCommand+0x1d8>)
 80004c2:	7a5b      	ldrb	r3, [r3, #9]
 80004c4:	f023 0302 	bic.w	r3, r3, #2
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <lcdCommand+0x1d8>)
 80004cc:	725a      	strb	r2, [r3, #9]
                    break;
 80004ce:	e00e      	b.n	80004ee <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <lcdCommand+0x1d8>)
 80004d2:	7a5a      	ldrb	r2, [r3, #9]
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <lcdCommand+0x1d8>)
 80004d6:	725a      	strb	r2, [r3, #9]
                    break;
 80004d8:	e009      	b.n	80004ee <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80004da:	4b19      	ldr	r3, [pc, #100]	; (8000540 <lcdCommand+0x1d8>)
 80004dc:	7a5b      	ldrb	r3, [r3, #9]
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <lcdCommand+0x1d8>)
 80004e6:	725a      	strb	r2, [r3, #9]
                    break;
 80004e8:	e001      	b.n	80004ee <lcdCommand+0x186>

                default:
                    return false;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e024      	b.n	8000538 <lcdCommand+0x1d0>
            }

            break;
 80004ee:	e001      	b.n	80004f4 <lcdCommand+0x18c>

        default:
            return false;
 80004f0:	2300      	movs	r3, #0
 80004f2:	e021      	b.n	8000538 <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	dc16      	bgt.n	8000528 <lcdCommand+0x1c0>
 80004fa:	2b06      	cmp	r3, #6
 80004fc:	da0d      	bge.n	800051a <lcdCommand+0x1b2>
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d004      	beq.n	800050c <lcdCommand+0x1a4>
 8000502:	2b00      	cmp	r3, #0
 8000504:	dd10      	ble.n	8000528 <lcdCommand+0x1c0>
 8000506:	3b03      	subs	r3, #3
 8000508:	2b01      	cmp	r3, #1
 800050a:	d80d      	bhi.n	8000528 <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <lcdCommand+0x1d8>)
 800050e:	7a1b      	ldrb	r3, [r3, #8]
 8000510:	f043 0308 	orr.w	r3, r3, #8
 8000514:	b2db      	uxtb	r3, r3
 8000516:	73fb      	strb	r3, [r7, #15]
            break;
 8000518:	e007      	b.n	800052a <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <lcdCommand+0x1d8>)
 800051c:	7a5b      	ldrb	r3, [r3, #9]
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73fb      	strb	r3, [r7, #15]
            break;
 8000526:	e000      	b.n	800052a <lcdCommand+0x1c2>

        default:
            break;
 8000528:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800052a:	f107 030f 	add.w	r3, r7, #15
 800052e:	4619      	mov	r1, r3
 8000530:	2000      	movs	r0, #0
 8000532:	f000 f87f 	bl	8000634 <lcdWriteByte>
 8000536:	4603      	mov	r3, r0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000288 	.word	0x20000288

08000544 <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <lcdBacklight+0x4c>)
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <lcdBacklight+0x4c>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <lcdBacklight+0x4c>)
 800055a:	799b      	ldrb	r3, [r3, #6]
 800055c:	b299      	uxth	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <lcdBacklight+0x50>)
 8000562:	f001 f8e9 	bl	8001738 <HAL_I2C_Master_Transmit_DMA>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d004      	beq.n	8000576 <lcdBacklight+0x32>
        return false;
 800056c:	2300      	movs	r3, #0
 800056e:	e00b      	b.n	8000588 <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f004 fb07 	bl	8004b84 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <lcdBacklight+0x4c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f001 faaf 	bl	8001ade <HAL_I2C_GetState>
 8000580:	4603      	mov	r3, r0
 8000582:	2b20      	cmp	r3, #32
 8000584:	d1f4      	bne.n	8000570 <lcdBacklight+0x2c>
    }

    return true;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000288 	.word	0x20000288
 8000594:	2000028f 	.word	0x2000028f

08000598 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <lcdSetCursorPosition+0x50>)
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	79ba      	ldrb	r2, [r7, #6]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d303      	bcc.n	80005ba <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <lcdSetCursorPosition+0x50>)
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <lcdSetCursorPosition+0x54>)
 80005be:	5cd2      	ldrb	r2, [r2, r3]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4413      	add	r3, r2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80005d2:	f107 030f 	add.w	r3, r7, #15
 80005d6:	4619      	mov	r1, r3
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 f82b 	bl	8000634 <lcdWriteByte>
 80005de:	4603      	mov	r3, r0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000288 	.word	0x20000288
 80005ec:	08005bac 	.word	0x08005bac

080005f0 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e00e      	b.n	8000620 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	4619      	mov	r1, r3
 800060a:	2001      	movs	r0, #1
 800060c:	f000 f812 	bl	8000634 <lcdWriteByte>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <lcdPrintStr+0x2a>
            return false;
 8000616:	2300      	movs	r3, #0
 8000618:	e007      	b.n	800062a <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	3301      	adds	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	7bfa      	ldrb	r2, [r7, #15]
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	429a      	cmp	r2, r3
 8000626:	d3ec      	bcc.n	8000602 <lcdPrintStr+0x12>
        }
    }

    return true;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8000640:	4b33      	ldr	r3, [pc, #204]	; (8000710 <lcdWriteByte+0xdc>)
 8000642:	79da      	ldrb	r2, [r3, #7]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4313      	orrs	r3, r2
 8000648:	b2da      	uxtb	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <lcdWriteByte+0xe0>)
 8000660:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <lcdWriteByte+0xe0>)
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <lcdWriteByte+0xe0>)
 8000668:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <lcdWriteByte+0xdc>)
 800066c:	79da      	ldrb	r2, [r3, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4313      	orrs	r3, r2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	b25a      	sxtb	r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b25b      	sxtb	r3, r3
 800067c:	f023 030f 	bic.w	r3, r3, #15
 8000680:	b25b      	sxtb	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	b25b      	sxtb	r3, r3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <lcdWriteByte+0xe0>)
 800068a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <lcdWriteByte+0xdc>)
 800068e:	79da      	ldrb	r2, [r3, #7]
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4313      	orrs	r3, r2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <lcdWriteByte+0xe0>)
 80006aa:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <lcdWriteByte+0xe0>)
 80006ae:	78da      	ldrb	r2, [r3, #3]
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <lcdWriteByte+0xe0>)
 80006b2:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <lcdWriteByte+0xdc>)
 80006b6:	79da      	ldrb	r2, [r3, #7]
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	b25a      	sxtb	r2, r3
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <lcdWriteByte+0xe0>)
 80006d0:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <lcdWriteByte+0xdc>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <lcdWriteByte+0xdc>)
 80006d8:	799b      	ldrb	r3, [r3, #6]
 80006da:	b299      	uxth	r1, r3
 80006dc:	2306      	movs	r3, #6
 80006de:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <lcdWriteByte+0xe0>)
 80006e0:	f001 f82a 	bl	8001738 <HAL_I2C_Master_Transmit_DMA>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <lcdWriteByte+0xc0>
        return false;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e00b      	b.n	8000706 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f004 fa48 	bl	8004b84 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <lcdWriteByte+0xdc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f9f0 	bl	8001ade <HAL_I2C_GetState>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b20      	cmp	r3, #32
 8000702:	d1f4      	bne.n	80006ee <lcdWriteByte+0xba>
    }

    return true;
 8000704:	2301      	movs	r3, #1
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000288 	.word	0x20000288
 8000714:	20000280 	.word	0x20000280

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  	lcdInit(&hi2c1, 0x27, 2, 16);       			    // init lcd (i2c reference, LCD address, lines, rows)
 800071e:	2310      	movs	r3, #16
 8000720:	2202      	movs	r2, #2
 8000722:	2127      	movs	r1, #39	; 0x27
 8000724:	481d      	ldr	r0, [pc, #116]	; (800079c <main+0x84>)
 8000726:	f7ff fd6d 	bl	8000204 <lcdInit>
	lcdAutoscrollOff();								              // turn off autoscroll
 800072a:	2100      	movs	r1, #0
 800072c:	2008      	movs	r0, #8
 800072e:	f7ff fe1b 	bl	8000368 <lcdCommand>
	lcdBacklightOn();								                // turn on backlight
 8000732:	2008      	movs	r0, #8
 8000734:	f7ff ff06 	bl	8000544 <lcdBacklight>
	lcdDisplayClear();                  			      // clear the screen
 8000738:	2101      	movs	r1, #1
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff fe14 	bl	8000368 <lcdCommand>
	lcdSetCursorPosition(2, 0);         			      // set the cursor
 8000740:	2100      	movs	r1, #0
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff ff28 	bl	8000598 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"welcome AERO!", 13);   	// print
 8000748:	210d      	movs	r1, #13
 800074a:	4815      	ldr	r0, [pc, #84]	; (80007a0 <main+0x88>)
 800074c:	f7ff ff50 	bl	80005f0 <lcdPrintStr>
	lcdSetCursorPosition(2, 1);         			      // next line
 8000750:	2101      	movs	r1, #1
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff20 	bl	8000598 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"booting up...", 13);   	// print
 8000758:	210d      	movs	r1, #13
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <main+0x8c>)
 800075c:	f7ff ff48 	bl	80005f0 <lcdPrintStr>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fa6a 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f824 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f8d8 	bl	800091c <MX_GPIO_Init>
  MX_I2C1_Init();
 800076c:	f000 f870 	bl	8000850 <MX_I2C1_Init>
  MX_DMA_Init();
 8000770:	f000 f8ae 	bl	80008d0 <MX_DMA_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <main+0x90>)
 8000776:	1d3c      	adds	r4, r7, #4
 8000778:	461d      	mov	r5, r3
 800077a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fedd 	bl	800454a <osThreadCreate>
 8000790:	4603      	mov	r3, r0
 8000792:	4a06      	ldr	r2, [pc, #24]	; (80007ac <main+0x94>)
 8000794:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000796:	f003 fed1 	bl	800453c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x82>
 800079c:	20001028 	.word	0x20001028
 80007a0:	08005b68 	.word	0x08005b68
 80007a4:	08005b78 	.word	0x08005b78
 80007a8:	08005b88 	.word	0x08005b88
 80007ac:	20000fe0 	.word	0x20000fe0

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09e      	sub	sp, #120	; 0x78
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 f9b8 	bl	8005b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	223c      	movs	r2, #60	; 0x3c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 f9aa 	bl	8005b34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fbeb 	bl	8002fd0 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000800:	f000 f8bc 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000818:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fade 	bl	8003de0 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800082a:	f000 f8a7 	bl	800097c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082e:	2320      	movs	r3, #32
 8000830:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fcb7 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 f89a 	bl	800097c <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3778      	adds	r7, #120	; 0x78
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f000 fec4 	bl	8001618 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 f871 	bl	800097c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f002 faff 	bl	8002ea0 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f868 	bl	800097c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f002 fb41 	bl	8002f36 <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f85f 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20001028 	.word	0x20001028
 80008c8:	40005400 	.word	0x40005400
 80008cc:	2000090e 	.word	0x2000090e

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_DMA_Init+0x48>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_DMA_Init+0x48>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_DMA_Init+0x48>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	2010      	movs	r0, #16
 80008f4:	f000 fae1 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f000 fafa 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	2011      	movs	r0, #17
 8000904:	f000 fad9 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000908:	2011      	movs	r0, #17
 800090a:	f000 faf2 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_GPIO_Init+0x4c>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_GPIO_Init+0x4c>)
 8000936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093a:	6153      	str	r3, [r2, #20]
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_GPIO_Init+0x4c>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000948:	2301      	movs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fce2 	bl	8001324 <HAL_GPIO_Init>

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f003 fe34 	bl	80045e2 <osDelay>
 800097a:	e7fb      	b.n	8000974 <StartDefaultTask+0x8>

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_MspInit+0x4c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_MspInit+0x4c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fa78 	bl	8000eba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_I2C_MspInit+0x138>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	f040 8086 	bne.w	8000b08 <HAL_I2C_MspInit+0x130>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b45      	ldr	r3, [pc, #276]	; (8000b14 <HAL_I2C_MspInit+0x13c>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_I2C_MspInit+0x13c>)
 8000a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a06:	6153      	str	r3, [r2, #20]
 8000a08:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <HAL_I2C_MspInit+0x13c>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a14:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	2312      	movs	r3, #18
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a26:	2304      	movs	r3, #4
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f000 fc76 	bl	8001324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <HAL_I2C_MspInit+0x13c>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <HAL_I2C_MspInit+0x13c>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	61d3      	str	r3, [r2, #28]
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_I2C_MspInit+0x13c>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000a50:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a52:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <HAL_I2C_MspInit+0x144>)
 8000a54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a58:	2210      	movs	r2, #16
 8000a5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a82:	f000 fa50 	bl	8000f26 <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_I2C_MspInit+0xb8>
    {
      Error_Handler();
 8000a8c:	f7ff ff76 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
 8000a96:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <HAL_I2C_MspInit+0x140>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000a9e:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <HAL_I2C_MspInit+0x14c>)
 8000aa0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000acc:	4814      	ldr	r0, [pc, #80]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ace:	f000 fa2a 	bl	8000f26 <HAL_DMA_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8000ad8:	f7ff ff50 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_I2C_MspInit+0x148>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	201f      	movs	r0, #31
 8000aee:	f000 f9e4 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000af2:	201f      	movs	r0, #31
 8000af4:	f000 f9fd 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2105      	movs	r1, #5
 8000afc:	2020      	movs	r0, #32
 8000afe:	f000 f9dc 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b02:	2020      	movs	r0, #32
 8000b04:	f000 f9f5 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	20000fe4 	.word	0x20000fe4
 8000b1c:	4002006c 	.word	0x4002006c
 8000b20:	20001074 	.word	0x20001074
 8000b24:	40020080 	.word	0x40020080

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8b4 	bl	8000cc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b5c:	f004 fb56 	bl	800520c <xTaskGetSchedulerState>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d001      	beq.n	8000b6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b66:	f004 fd97 	bl	8005698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <DMA1_Channel6_IRQHandler+0x10>)
 8000b76:	f000 faba 	bl	80010ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000fe4 	.word	0x20000fe4

08000b84 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <DMA1_Channel7_IRQHandler+0x10>)
 8000b8a:	f000 fab0 	bl	80010ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20001074 	.word	0x20001074

08000b98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <I2C1_EV_IRQHandler+0x10>)
 8000b9e:	f000 febb 	bl	8001918 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20001028 	.word	0x20001028

08000bac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <I2C1_ER_IRQHandler+0x10>)
 8000bb2:	f000 fecb 	bl	800194c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20001028 	.word	0x20001028

08000bc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c0e:	f7ff ffd7 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f004 ff6b 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c16:	f7ff fd7f 	bl	8000718 <main>

08000c1a <LoopForever>:

LoopForever:
    b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c28:	08005be8 	.word	0x08005be8
  ldr r2, =_sbss
 8000c2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c30:	200010bc 	.word	0x200010bc

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x28>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f92b 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe98 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f943 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f90b 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	200010b8 	.word	0x200010b8

08000cec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200010b8 	.word	0x200010b8

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff3e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff31 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e037      	b.n	8000fac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f98c 	bl	80012ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}  
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <HAL_DMA_Start_IT+0x20>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e04a      	b.n	800106a <HAL_DMA_Start_IT+0xb6>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d13a      	bne.n	800105c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 f91f 	bl	800124e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 020e 	orr.w	r2, r2, #14
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e00f      	b.n	800104a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 020a 	orr.w	r2, r2, #10
 8001038:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0204 	bic.w	r2, r2, #4
 8001048:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e005      	b.n	8001068 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001064:	2302      	movs	r3, #2
 8001066:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001068:	7dfb      	ldrb	r3, [r7, #23]
} 
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001084:	2b02      	cmp	r3, #2
 8001086:	d005      	beq.n	8001094 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2204      	movs	r2, #4
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e027      	b.n	80010e4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 020e 	bic.w	r2, r2, #14
 80010a2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	4798      	blx	r3
    } 
  }
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2204      	movs	r2, #4
 800110c:	409a      	lsls	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d024      	beq.n	8001160 <HAL_DMA_IRQHandler+0x72>
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01f      	beq.n	8001160 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0204 	bic.w	r2, r2, #4
 800113c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001146:	2104      	movs	r1, #4
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	2b00      	cmp	r3, #0
 8001154:	d06a      	beq.n	800122c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800115e:	e065      	b.n	800122c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	2202      	movs	r2, #2
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d02c      	beq.n	80011ca <HAL_DMA_IRQHandler+0xdc>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d027      	beq.n	80011ca <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10b      	bne.n	80011a0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020a 	bic.w	r2, r2, #10
 8001196:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	2102      	movs	r1, #2
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d035      	beq.n	800122c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011c8:	e030      	b.n	800122c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	2208      	movs	r2, #8
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d028      	beq.n	800122c <HAL_DMA_IRQHandler+0x13e>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d023      	beq.n	800122c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 020e 	bic.w	r2, r2, #14
 80011f2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    }
  }
}  
 800122a:	e7ff      	b.n	800122c <HAL_DMA_IRQHandler+0x13e>
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b10      	cmp	r3, #16
 800127a:	d108      	bne.n	800128e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800128c:	e007      	b.n	800129e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	60da      	str	r2, [r3, #12]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <DMA_CalcBaseAndBitshift+0x60>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	d80f      	bhi.n	80012e0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <DMA_CalcBaseAndBitshift+0x64>)
 80012c8:	4413      	add	r3, r2
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <DMA_CalcBaseAndBitshift+0x68>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	009a      	lsls	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <DMA_CalcBaseAndBitshift+0x6c>)
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80012de:	e00e      	b.n	80012fe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <DMA_CalcBaseAndBitshift+0x70>)
 80012e8:	4413      	add	r3, r2
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <DMA_CalcBaseAndBitshift+0x68>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	009a      	lsls	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <DMA_CalcBaseAndBitshift+0x74>)
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40020407 	.word	0x40020407
 8001310:	bffdfff8 	.word	0xbffdfff8
 8001314:	cccccccd 	.word	0xcccccccd
 8001318:	40020000 	.word	0x40020000
 800131c:	bffdfbf8 	.word	0xbffdfbf8
 8001320:	40020400 	.word	0x40020400

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e154      	b.n	80015de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8146 	beq.w	80015d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d005      	beq.n	8001364 <HAL_GPIO_Init+0x40>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d130      	bne.n	80013c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139a:	2201      	movs	r2, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 0201 	and.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d017      	beq.n	8001402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d123      	bne.n	8001456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0203 	and.w	r2, r3, #3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80a0 	beq.w	80015d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_GPIO_Init+0x2d8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_GPIO_Init+0x2d8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_GPIO_Init+0x2d8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b0:	4a53      	ldr	r2, [pc, #332]	; (8001600 <HAL_GPIO_Init+0x2dc>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014da:	d019      	beq.n	8001510 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a49      	ldr	r2, [pc, #292]	; (8001604 <HAL_GPIO_Init+0x2e0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d013      	beq.n	800150c <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_GPIO_Init+0x2e4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00d      	beq.n	8001508 <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a47      	ldr	r2, [pc, #284]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0x1e0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d101      	bne.n	8001500 <HAL_GPIO_Init+0x1dc>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e008      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001500:	2305      	movs	r3, #5
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001504:	2303      	movs	r3, #3
 8001506:	e004      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001508:	2302      	movs	r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001510:	2300      	movs	r3, #0
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	f002 0203 	and.w	r2, r2, #3
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4093      	lsls	r3, r2
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001522:	4937      	ldr	r1, [pc, #220]	; (8001600 <HAL_GPIO_Init+0x2dc>)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800157e:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f47f aea3 	bne.w	8001334 <HAL_GPIO_Init+0x10>
  }
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	48000400 	.word	0x48000400
 8001608:	48000800 	.word	0x48000800
 800160c:	48000c00 	.word	0x48000c00
 8001610:	48001000 	.word	0x48001000
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e081      	b.n	800172e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff f9ca 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	e006      	b.n	80016a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800169e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d104      	bne.n	80016b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69d9      	ldr	r1, [r3, #28]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	460b      	mov	r3, r1
 8001746:	817b      	strh	r3, [r7, #10]
 8001748:	4613      	mov	r3, r2
 800174a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b20      	cmp	r3, #32
 8001756:	f040 80cd 	bne.w	80018f4 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001768:	d101      	bne.n	800176e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
 800176c:	e0c3      	b.n	80018f6 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2C_Master_Transmit_DMA+0x44>
 8001778:	2302      	movs	r3, #2
 800177a:	e0bc      	b.n	80018f6 <HAL_I2C_Master_Transmit_DMA+0x1be>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2221      	movs	r2, #33	; 0x21
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2210      	movs	r2, #16
 8001790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	893a      	ldrh	r2, [r7, #8]
 80017a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a55      	ldr	r2, [pc, #340]	; (8001900 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4a55      	ldr	r2, [pc, #340]	; (8001904 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2bff      	cmp	r3, #255	; 0xff
 80017ba:	d906      	bls.n	80017ca <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80017c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e007      	b.n	80017da <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d070      	beq.n	80018c4 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d020      	beq.n	800182c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	4a46      	ldr	r2, [pc, #280]	; (8001908 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	4a45      	ldr	r2, [pc, #276]	; (800190c <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	2200      	movs	r2, #0
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3328      	adds	r3, #40	; 0x28
 8001816:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800181c:	f7ff fbca 	bl	8000fb4 <HAL_DMA_Start_IT>
 8001820:	4603      	mov	r3, r0
 8001822:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001824:	7cfb      	ldrb	r3, [r7, #19]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d138      	bne.n	800189c <HAL_I2C_Master_Transmit_DMA+0x164>
 800182a:	e013      	b.n	8001854 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e050      	b.n	80018f6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001858:	b2da      	uxtb	r2, r3
 800185a:	8979      	ldrh	r1, [r7, #10]
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f001 fa2c 	bl	8002cc0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001882:	2110      	movs	r1, #16
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f001 fa49 	bl	8002d1c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e029      	b.n	80018f0 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	f043 0210 	orr.w	r2, r3, #16
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e018      	b.n	80018f6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f001 f9f0 	bl	8002cc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018e8:	2101      	movs	r1, #1
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f001 fa16 	bl	8002d1c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	ffff0000 	.word	0xffff0000
 8001904:	08001f51 	.word	0x08001f51
 8001908:	08002bbf 	.word	0x08002bbf
 800190c:	08002c55 	.word	0x08002c55
 8001910:	80002000 	.word	0x80002000
 8001914:	08001afb 	.word	0x08001afb

08001918 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	68f9      	ldr	r1, [r7, #12]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
  }
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	09db      	lsrs	r3, r3, #7
 8001974:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00a      	beq.n	8001992 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001990:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	0a9b      	lsrs	r3, r3, #10
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	09db      	lsrs	r3, r3, #7
 80019a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f043 0208 	orr.w	r2, r3, #8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	0a5b      	lsrs	r3, r3, #9
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	09db      	lsrs	r3, r3, #7
 80019d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f043 0202 	orr.w	r2, r3, #2
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 030b 	and.w	r3, r3, #11
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 ffc1 	bl	8002988 <I2C_ITError>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aec:	b2db      	uxtb	r3, r3
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b088      	sub	sp, #32
 8001afe:	af02      	add	r7, sp, #8
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <I2C_Master_ISR_IT+0x1e>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e114      	b.n	8001d42 <I2C_Master_ISR_IT+0x248>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00d      	beq.n	8001b54 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f043 0204 	orr.w	r2, r3, #4
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f001 f812 	bl	8002b76 <I2C_Flush_TXDR>
 8001b52:	e0e1      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01d      	beq.n	8001ba8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f023 0304 	bic.w	r3, r3, #4
 8001b72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba6:	e0b7      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01e      	beq.n	8001bf2 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d018      	beq.n	8001bf2 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf0:	e092      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	09db      	lsrs	r3, r3, #7
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d05d      	beq.n	8001cba <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d057      	beq.n	8001cba <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d040      	beq.n	8001c96 <I2C_Master_ISR_IT+0x19c>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d13c      	bne.n	8001c96 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c28:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2bff      	cmp	r3, #255	; 0xff
 8001c32:	d90e      	bls.n	8001c52 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	22ff      	movs	r2, #255	; 0xff
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	8a79      	ldrh	r1, [r7, #18]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f001 f838 	bl	8002cc0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c50:	e032      	b.n	8001cb8 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c64:	d00b      	beq.n	8001c7e <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	8a79      	ldrh	r1, [r7, #18]
 8001c72:	2000      	movs	r0, #0
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f001 f822 	bl	8002cc0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7c:	e01c      	b.n	8001cb8 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	8a79      	ldrh	r1, [r7, #18]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f001 f816 	bl	8002cc0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c94:	e010      	b.n	8001cb8 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca4:	d003      	beq.n	8001cae <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fba9 	bl	80023fe <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cac:	e034      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001cae:	2140      	movs	r1, #64	; 0x40
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fe69 	bl	8002988 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb6:	e02f      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
 8001cb8:	e02e      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d028      	beq.n	8001d18 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d022      	beq.n	8001d18 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d119      	bne.n	8001d10 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cea:	d015      	beq.n	8001d18 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cf4:	d108      	bne.n	8001d08 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	e007      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fb78 	bl	80023fe <I2C_ITMasterSeqCplt>
 8001d0e:	e003      	b.n	8001d18 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d10:	2140      	movs	r1, #64	; 0x40
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fe38 	bl	8002988 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fbfe 	bl	8002534 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <I2C_Slave_ISR_IT+0x24>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e0ec      	b.n	8001f48 <I2C_Slave_ISR_IT+0x1fe>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fc99 	bl	80026c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04d      	beq.n	8001e3e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d047      	beq.n	8001e3e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d128      	bne.n	8001e0a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b28      	cmp	r3, #40	; 0x28
 8001dc2:	d108      	bne.n	8001dd6 <I2C_Slave_ISR_IT+0x8c>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dca:	d104      	bne.n	8001dd6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fd84 	bl	80028dc <I2C_ITListenCplt>
 8001dd4:	e032      	b.n	8001e3c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b29      	cmp	r3, #41	; 0x29
 8001de0:	d10e      	bne.n	8001e00 <I2C_Slave_ISR_IT+0xb6>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de8:	d00a      	beq.n	8001e00 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 febf 	bl	8002b76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fb3d 	bl	8002478 <I2C_ITSlaveSeqCplt>
 8001dfe:	e01d      	b.n	8001e3c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2210      	movs	r2, #16
 8001e06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e08:	e096      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <I2C_Slave_ISR_IT+0xe4>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2a:	f040 8085 	bne.w	8001f38 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4619      	mov	r1, r3
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fda7 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e3a:	e07d      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1ee>
 8001e3c:	e07c      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d030      	beq.n	8001eac <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d02a      	beq.n	8001eac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d018      	beq.n	8001e92 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d14f      	bne.n	8001f3c <I2C_Slave_ISR_IT+0x1f2>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ea2:	d04b      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fae7 	bl	8002478 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001eaa:	e047      	b.n	8001f3c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa15 	bl	80022f6 <I2C_ITAddrCplt>
 8001ecc:	e037      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d031      	beq.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d02b      	beq.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d018      	beq.n	8001f22 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f20:	e00d      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d002      	beq.n	8001f30 <I2C_Slave_ISR_IT+0x1e6>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 faa1 	bl	8002478 <I2C_ITSlaveSeqCplt>
 8001f36:	e002      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001f38:	bf00      	nop
 8001f3a:	e000      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001f3c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <I2C_Master_ISR_DMA+0x1a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e0e1      	b.n	800212e <I2C_Master_ISR_DMA+0x1de>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d011      	beq.n	8001fae <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0204 	orr.w	r2, r3, #4
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 febb 	bl	8002d1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fde5 	bl	8002b76 <I2C_Flush_TXDR>
 8001fac:	e0ba      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	09db      	lsrs	r3, r3, #7
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d072      	beq.n	80020a0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d04e      	beq.n	800207e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2bff      	cmp	r3, #255	; 0xff
 8001ff6:	d906      	bls.n	8002006 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e010      	b.n	8002028 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002018:	d003      	beq.n	8002022 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e002      	b.n	8002028 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002026:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	b2da      	uxtb	r2, r3
 800202e:	8a79      	ldrh	r1, [r7, #18]
 8002030:	2300      	movs	r3, #0
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fe42 	bl	8002cc0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b22      	cmp	r3, #34	; 0x22
 8002058:	d108      	bne.n	800206c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002068:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800206a:	e05b      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800207a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800207c:	e052      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800208c:	d003      	beq.n	8002096 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9b5 	bl	80023fe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002094:	e046      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fc75 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800209e:	e041      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d029      	beq.n	8002100 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d0:	d027      	beq.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020da:	d108      	bne.n	80020ee <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80020ec:	e019      	b.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f985 	bl	80023fe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80020f4:	e015      	b.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fc45 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020fe:	e010      	b.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fa0a 	bl	8002534 <I2C_ITMasterCplt>
 8002120:	e000      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002122:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b088      	sub	sp, #32
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <I2C_Slave_ISR_DMA+0x24>
 8002156:	2302      	movs	r3, #2
 8002158:	e0c9      	b.n	80022ee <I2C_Slave_ISR_DMA+0x1b8>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 faa3 	bl	80026c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 809a 	beq.w	80022c4 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8093 	beq.w	80022c4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0b9b      	lsrs	r3, r3, #14
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0bdb      	lsrs	r3, r3, #15
 80021ae:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d07f      	beq.n	80022b6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0bdb      	lsrs	r3, r3, #15
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0b9b      	lsrs	r3, r3, #14
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d128      	bne.n	8002256 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b28      	cmp	r3, #40	; 0x28
 800220e:	d108      	bne.n	8002222 <I2C_Slave_ISR_DMA+0xec>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002216:	d104      	bne.n	8002222 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fb5e 	bl	80028dc <I2C_ITListenCplt>
 8002220:	e048      	b.n	80022b4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b29      	cmp	r3, #41	; 0x29
 800222c:	d10e      	bne.n	800224c <I2C_Slave_ISR_DMA+0x116>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002234:	d00a      	beq.n	800224c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2210      	movs	r2, #16
 800223c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fc99 	bl	8002b76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f917 	bl	8002478 <I2C_ITSlaveSeqCplt>
 800224a:	e033      	b.n	80022b4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2210      	movs	r2, #16
 8002252:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002254:	e034      	b.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <I2C_Slave_ISR_DMA+0x14a>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227e:	d11f      	bne.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b21      	cmp	r3, #33	; 0x21
 8002284:	d002      	beq.n	800228c <I2C_Slave_ISR_DMA+0x156>
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	2b29      	cmp	r3, #41	; 0x29
 800228a:	d103      	bne.n	8002294 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2221      	movs	r2, #33	; 0x21
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
 8002292:	e008      	b.n	80022a6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b22      	cmp	r3, #34	; 0x22
 8002298:	d002      	beq.n	80022a0 <I2C_Slave_ISR_DMA+0x16a>
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	2b2a      	cmp	r3, #42	; 0x2a
 800229e:	d102      	bne.n	80022a6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2222      	movs	r2, #34	; 0x22
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fb6b 	bl	8002988 <I2C_ITError>
      if (treatdmanack == 1U)
 80022b2:	e005      	b.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
 80022b4:	e004      	b.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2210      	movs	r2, #16
 80022bc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022be:	e011      	b.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80022c0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022c2:	e00f      	b.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f809 	bl	80022f6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800230c:	2b28      	cmp	r3, #40	; 0x28
 800230e:	d16a      	bne.n	80023e6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	b29b      	uxth	r3, r3
 800232a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800232e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800234a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d138      	bne.n	80023c6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002354:	897b      	ldrh	r3, [r7, #10]
 8002356:	09db      	lsrs	r3, r3, #7
 8002358:	b29a      	uxth	r2, r3
 800235a:	89bb      	ldrh	r3, [r7, #12]
 800235c:	4053      	eors	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	f003 0306 	and.w	r3, r3, #6
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11c      	bne.n	80023a2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	2b02      	cmp	r3, #2
 800237c:	d13b      	bne.n	80023f6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2208      	movs	r2, #8
 800238a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002394:	89ba      	ldrh	r2, [r7, #12]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fb5f 	bl	8001a5e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023a0:	e029      	b.n	80023f6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80023a2:	893b      	ldrh	r3, [r7, #8]
 80023a4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fd1a 	bl	8002de4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023b8:	89ba      	ldrh	r2, [r7, #12]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fb4d 	bl	8001a5e <HAL_I2C_AddrCallback>
}
 80023c4:	e017      	b.n	80023f6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fd0a 	bl	8002de4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023d8:	89ba      	ldrh	r2, [r7, #12]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fb3d 	bl	8001a5e <HAL_I2C_AddrCallback>
}
 80023e4:	e007      	b.n	80023f6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b21      	cmp	r3, #33	; 0x21
 8002418:	d115      	bne.n	8002446 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2211      	movs	r2, #17
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800242e:	2101      	movs	r1, #1
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fcd7 	bl	8002de4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fae5 	bl	8001a0e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002444:	e014      	b.n	8002470 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2212      	movs	r2, #18
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800245a:	2102      	movs	r1, #2
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fcc1 	bl	8002de4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fad9 	bl	8001a22 <HAL_I2C_MasterRxCpltCallback>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	0b9b      	lsrs	r3, r3, #14
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e00d      	b.n	80024ca <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0bdb      	lsrs	r3, r3, #15
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b29      	cmp	r3, #41	; 0x29
 80024d4:	d112      	bne.n	80024fc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2228      	movs	r2, #40	; 0x28
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024e4:	2101      	movs	r1, #1
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fc7c 	bl	8002de4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fa9e 	bl	8001a36 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024fa:	e017      	b.n	800252c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b2a      	cmp	r3, #42	; 0x2a
 8002506:	d111      	bne.n	800252c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2228      	movs	r2, #40	; 0x28
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2222      	movs	r2, #34	; 0x22
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002516:	2102      	movs	r1, #2
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fc63 	bl	8002de4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fa8f 	bl	8001a4a <HAL_I2C_SlaveRxCpltCallback>
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2220      	movs	r2, #32
 8002548:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b21      	cmp	r3, #33	; 0x21
 8002554:	d107      	bne.n	8002566 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002556:	2101      	movs	r1, #1
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fc43 	bl	8002de4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2211      	movs	r2, #17
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
 8002564:	e00c      	b.n	8002580 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b22      	cmp	r3, #34	; 0x22
 8002570:	d106      	bne.n	8002580 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002572:	2102      	movs	r1, #2
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fc35 	bl	8002de4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2212      	movs	r2, #18
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <I2C_ITMasterCplt+0x18c>)
 800258c:	400b      	ands	r3, r1
 800258e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4a      	ldr	r2, [pc, #296]	; (80026c4 <I2C_ITMasterCplt+0x190>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b60      	cmp	r3, #96	; 0x60
 80025c6:	d10b      	bne.n	80025e0 <I2C_ITMasterCplt+0xac>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80025de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fac8 	bl	8002b76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d002      	beq.n	80025fe <I2C_ITMasterCplt+0xca>
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f9bf 	bl	8002988 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800260a:	e054      	b.n	80026b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b21      	cmp	r3, #33	; 0x21
 8002616:	d124      	bne.n	8002662 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	d10b      	bne.n	800264a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fa23 	bl	8001a8e <HAL_I2C_MemTxCpltCallback>
}
 8002648:	e035      	b.n	80026b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff f9d7 	bl	8001a0e <HAL_I2C_MasterTxCpltCallback>
}
 8002660:	e029      	b.n	80026b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b22      	cmp	r3, #34	; 0x22
 800266c:	d123      	bne.n	80026b6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d10b      	bne.n	80026a0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff fa02 	bl	8001aa2 <HAL_I2C_MemRxCpltCallback>
}
 800269e:	e00a      	b.n	80026b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff f9b6 	bl	8001a22 <HAL_I2C_MasterRxCpltCallback>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	fe00e800 	.word	0xfe00e800
 80026c4:	ffff0000 	.word	0xffff0000

080026c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2220      	movs	r2, #32
 80026ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b21      	cmp	r3, #33	; 0x21
 80026f2:	d002      	beq.n	80026fa <I2C_ITSlaveCplt+0x32>
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b29      	cmp	r3, #41	; 0x29
 80026f8:	d108      	bne.n	800270c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80026fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fb70 	bl	8002de4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2221      	movs	r2, #33	; 0x21
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
 800270a:	e00d      	b.n	8002728 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b22      	cmp	r3, #34	; 0x22
 8002710:	d002      	beq.n	8002718 <I2C_ITSlaveCplt+0x50>
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b2a      	cmp	r3, #42	; 0x2a
 8002716:	d107      	bne.n	8002728 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002718:	f248 0102 	movw	r1, #32770	; 0x8002
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fb61 	bl	8002de4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2222      	movs	r2, #34	; 0x22
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002736:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <I2C_ITSlaveCplt+0x20c>)
 8002744:	400b      	ands	r3, r1
 8002746:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa14 	bl	8002b76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	0b9b      	lsrs	r3, r3, #14
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d013      	beq.n	8002782 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002768:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	2b00      	cmp	r3, #0
 8002770:	d020      	beq.n	80027b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002780:	e018      	b.n	80027b4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	0bdb      	lsrs	r3, r3, #15
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00c      	beq.n	8002802 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4619      	mov	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8a7 	bl	8002988 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b28      	cmp	r3, #40	; 0x28
 8002844:	d141      	bne.n	80028ca <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002846:	6979      	ldr	r1, [r7, #20]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f847 	bl	80028dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800284e:	e03c      	b.n	80028ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002858:	d014      	beq.n	8002884 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fe0c 	bl	8002478 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <I2C_ITSlaveCplt+0x210>)
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff f8fc 	bl	8001a7a <HAL_I2C_ListenCpltCallback>
}
 8002882:	e022      	b.n	80028ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b22      	cmp	r3, #34	; 0x22
 800288e:	d10e      	bne.n	80028ae <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff f8cf 	bl	8001a4a <HAL_I2C_SlaveRxCpltCallback>
}
 80028ac:	e00d      	b.n	80028ca <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff f8b6 	bl	8001a36 <HAL_I2C_SlaveTxCpltCallback>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	fe00e800 	.word	0xfe00e800
 80028d8:	ffff0000 	.word	0xffff0000

080028dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <I2C_ITListenCplt+0xa8>)
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d022      	beq.n	800295a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d012      	beq.n	800295a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800295a:	f248 0103 	movw	r1, #32771	; 0x8003
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa40 	bl	8002de4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2210      	movs	r2, #16
 800296a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff f880 	bl	8001a7a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	ffff0000 	.word	0xffff0000

08002988 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <I2C_ITError+0x194>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b28      	cmp	r3, #40	; 0x28
 80029be:	d005      	beq.n	80029cc <I2C_ITError+0x44>
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b29      	cmp	r3, #41	; 0x29
 80029c4:	d002      	beq.n	80029cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b2a      	cmp	r3, #42	; 0x2a
 80029ca:	d10b      	bne.n	80029e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029cc:	2103      	movs	r1, #3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa08 	bl	8002de4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2228      	movs	r2, #40	; 0x28
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <I2C_ITError+0x198>)
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34
 80029e2:	e011      	b.n	8002a08 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9fb 	bl	8002de4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b60      	cmp	r3, #96	; 0x60
 80029f8:	d003      	beq.n	8002a02 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d039      	beq.n	8002a8a <I2C_ITError+0x102>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b11      	cmp	r3, #17
 8002a1a:	d002      	beq.n	8002a22 <I2C_ITError+0x9a>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b21      	cmp	r3, #33	; 0x21
 8002a20:	d133      	bne.n	8002a8a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a30:	d107      	bne.n	8002a42 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fbf4 	bl	8001234 <HAL_DMA_GetState>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d017      	beq.n	8002a82 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <I2C_ITError+0x19c>)
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fb03 	bl	8001072 <HAL_DMA_Abort_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04d      	beq.n	8002b0e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a80:	e045      	b.n	8002b0e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f850 	bl	8002b28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a88:	e041      	b.n	8002b0e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d039      	beq.n	8002b06 <I2C_ITError+0x17e>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b12      	cmp	r3, #18
 8002a96:	d002      	beq.n	8002a9e <I2C_ITError+0x116>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b22      	cmp	r3, #34	; 0x22
 8002a9c:	d133      	bne.n	8002b06 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aac:	d107      	bne.n	8002abe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002abc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fbb6 	bl	8001234 <HAL_DMA_GetState>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d017      	beq.n	8002afe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <I2C_ITError+0x19c>)
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fac5 	bl	8001072 <HAL_DMA_Abort_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002af8:	4610      	mov	r0, r2
 8002afa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002afc:	e009      	b.n	8002b12 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f812 	bl	8002b28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b04:	e005      	b.n	8002b12 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f80e 	bl	8002b28 <I2C_TreatErrorCallback>
  }
}
 8002b0c:	e002      	b.n	8002b14 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b12:	bf00      	nop
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	ffff0000 	.word	0xffff0000
 8002b20:	08001d4b 	.word	0x08001d4b
 8002b24:	08002c83 	.word	0x08002c83

08002b28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b60      	cmp	r3, #96	; 0x60
 8002b3a:	d10e      	bne.n	8002b5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe ffb9 	bl	8001aca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b58:	e009      	b.n	8002b6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fe ffa4 	bl	8001ab6 <HAL_I2C_ErrorCallback>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d103      	bne.n	8002b94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d007      	beq.n	8002bb2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	619a      	str	r2, [r3, #24]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bda:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002be6:	2120      	movs	r1, #32
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f897 	bl	8002d1c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002bee:	e02d      	b.n	8002c4c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2bff      	cmp	r3, #255	; 0xff
 8002c06:	d903      	bls.n	8002c10 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	22ff      	movs	r2, #255	; 0xff
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c0e:	e004      	b.n	8002c1a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	4619      	mov	r1, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3328      	adds	r3, #40	; 0x28
 8002c2a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002c30:	f7fe f9c0 	bl	8000fb4 <HAL_DMA_Start_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff fea3 	bl	8002988 <I2C_ITError>
}
 8002c42:	e003      	b.n	8002c4c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f868 	bl	8002d1c <I2C_Enable_IRQ>
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c70:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002c72:	2110      	movs	r1, #16
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fe87 	bl	8002988 <I2C_ITError>
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	2200      	movs	r2, #0
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f7ff ff39 	bl	8002b28 <I2C_TreatErrorCallback>
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	0d5b      	lsrs	r3, r3, #21
 8002cdc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <I2C_TransferConfig+0x58>)
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	ea02 0103 	and.w	r1, r2, r3
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf0:	7a7b      	ldrb	r3, [r7, #9]
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	03ff63ff 	.word	0x03ff63ff

08002d1c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <I2C_Enable_IRQ+0xc0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <I2C_Enable_IRQ+0xc4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d11d      	bne.n	8002d7c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da03      	bge.n	8002d50 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002d4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d103      	bne.n	8002d5e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002d5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d103      	bne.n	8002d6c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d125      	bne.n	8002dbe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d78:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d7a:	e020      	b.n	8002dbe <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da03      	bge.n	8002d8c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002d8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002d9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002dae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d103      	bne.n	8002dbe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	08001f51 	.word	0x08001f51
 8002de0:	08002137 	.word	0x08002137

08002de4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00f      	beq.n	8002e1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002e04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e12:	2b28      	cmp	r3, #40	; 0x28
 8002e14:	d003      	beq.n	8002e1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002e1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00f      	beq.n	8002e48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002e2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e3c:	2b28      	cmp	r3, #40	; 0x28
 8002e3e:	d003      	beq.n	8002e48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002e46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da03      	bge.n	8002e58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d103      	bne.n	8002e66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d103      	bne.n	8002e74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f043 0320 	orr.w	r3, r3, #32
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d103      	bne.n	8002e82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	400a      	ands	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d138      	bne.n	8002f28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e032      	b.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d139      	bne.n	8002fc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e033      	b.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2224      	movs	r2, #36	; 0x24
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f000 bef4 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 816a 	beq.w	80032ce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ffa:	4bb3      	ldr	r3, [pc, #716]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b04      	cmp	r3, #4
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003006:	4bb0      	ldr	r3, [pc, #704]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d159      	bne.n	80030c6 <HAL_RCC_OscConfig+0xf6>
 8003012:	4bad      	ldr	r3, [pc, #692]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d152      	bne.n	80030c6 <HAL_RCC_OscConfig+0xf6>
 8003020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003024:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003034:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d102      	bne.n	8003052 <HAL_RCC_OscConfig+0x82>
 800304c:	4b9e      	ldr	r3, [pc, #632]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0xae>
 8003052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003056:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800306a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800306e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800307a:	4b93      	ldr	r3, [pc, #588]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003082:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003086:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003092:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003096:	fab2 f282 	clz	r2, r2
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f002 021f 	and.w	r2, r2, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 810c 	beq.w	80032cc <HAL_RCC_OscConfig+0x2fc>
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 8106 	bne.w	80032cc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f000 be86 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x110>
 80030d2:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e030      	b.n	8003142 <HAL_RCC_OscConfig+0x172>
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x134>
 80030ea:	4b77      	ldr	r3, [pc, #476]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a76      	ldr	r2, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b74      	ldr	r3, [pc, #464]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80030fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e01e      	b.n	8003142 <HAL_RCC_OscConfig+0x172>
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x15a>
 8003110:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6c      	ldr	r2, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x172>
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a66      	ldr	r2, [pc, #408]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b64      	ldr	r3, [pc, #400]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003142:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	495d      	ldr	r1, [pc, #372]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d059      	beq.n	8003214 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fd fdc4 	bl	8000cec <HAL_GetTick>
 8003164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800316a:	f7fd fdbf 	bl	8000cec <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d902      	bls.n	8003180 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	f000 be29 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003184:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003194:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_RCC_OscConfig+0x1e2>
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x20e>
 80031b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031ea:	fa92 f2a2 	rbit	r2, r2
 80031ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0220 	orr.w	r2, r2, #32
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ab      	beq.n	800316a <HAL_RCC_OscConfig+0x19a>
 8003212:	e05c      	b.n	80032ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fd fd6a 	bl	8000cec <HAL_GetTick>
 8003218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321e:	f7fd fd65 	bl	8000cec <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d902      	bls.n	8003234 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	f000 bdcf 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003238:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003248:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_RCC_OscConfig+0x296>
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x2c2>
 8003266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800327a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003282:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_RCC_OscConfig+0x2f8>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003296:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800329a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80032a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ab      	bne.n	800321e <HAL_RCC_OscConfig+0x24e>
 80032c6:	e002      	b.n	80032ce <HAL_RCC_OscConfig+0x2fe>
 80032c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 816f 	beq.w	80035bc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032de:	4bd0      	ldr	r3, [pc, #832]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032ea:	4bcd      	ldr	r3, [pc, #820]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d16c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x400>
 80032f6:	4bca      	ldr	r3, [pc, #808]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d166      	bne.n	80033d0 <HAL_RCC_OscConfig+0x400>
 8003302:	2302      	movs	r3, #2
 8003304:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003314:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_RCC_OscConfig+0x362>
 800332c:	4bbc      	ldr	r3, [pc, #752]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	e013      	b.n	800335a <HAL_RCC_OscConfig+0x38a>
 8003332:	2302      	movs	r3, #2
 8003334:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003344:	2302      	movs	r3, #2
 8003346:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800334a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003356:	4bb2      	ldr	r3, [pc, #712]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2202      	movs	r2, #2
 800335c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003360:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003364:	fa92 f2a2 	rbit	r2, r2
 8003368:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800336c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003370:	fab2 f282 	clz	r2, r2
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f042 0220 	orr.w	r2, r2, #32
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f002 021f 	and.w	r2, r2, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_RCC_OscConfig+0x3cc>
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f000 bd1b 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	21f8      	movs	r1, #248	; 0xf8
 80033ac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033b4:	fa91 f1a1 	rbit	r1, r1
 80033b8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80033bc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80033c0:	fab1 f181 	clz	r1, r1
 80033c4:	b2c9      	uxtb	r1, r1
 80033c6:	408b      	lsls	r3, r1
 80033c8:	4995      	ldr	r1, [pc, #596]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e0f5      	b.n	80035bc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8085 	beq.w	80034e6 <HAL_RCC_OscConfig+0x516>
 80033dc:	2301      	movs	r3, #1
 80033de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	461a      	mov	r2, r3
 8003404:	2301      	movs	r3, #1
 8003406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fd fc70 	bl	8000cec <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7fd fc6b 	bl	8000cec <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d902      	bls.n	8003428 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	f000 bcd5 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800343a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0x488>
 8003452:	4b73      	ldr	r3, [pc, #460]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x4b0>
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003470:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800347c:	4b68      	ldr	r3, [pc, #416]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2202      	movs	r2, #2
 8003482:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003486:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003492:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003496:	fab2 f282 	clz	r2, r2
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f042 0220 	orr.w	r2, r2, #32
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	f002 021f 	and.w	r2, r2, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0af      	beq.n	8003412 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	21f8      	movs	r1, #248	; 0xf8
 80034c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034ca:	fa91 f1a1 	rbit	r1, r1
 80034ce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80034d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034d6:	fab1 f181 	clz	r1, r1
 80034da:	b2c9      	uxtb	r1, r1
 80034dc:	408b      	lsls	r3, r1
 80034de:	4950      	ldr	r1, [pc, #320]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
 80034e4:	e06a      	b.n	80035bc <HAL_RCC_OscConfig+0x5ec>
 80034e6:	2301      	movs	r3, #1
 80034e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003506:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fbeb 	bl	8000cec <HAL_GetTick>
 8003516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800351c:	f7fd fbe6 	bl	8000cec <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d902      	bls.n	8003532 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	f000 bc50 	b.w	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003532:	2302      	movs	r3, #2
 8003534:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0x592>
 800355c:	4b30      	ldr	r3, [pc, #192]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	e013      	b.n	800358a <HAL_RCC_OscConfig+0x5ba>
 8003562:	2302      	movs	r3, #2
 8003564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003574:	2302      	movs	r3, #2
 8003576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800357a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HAL_RCC_OscConfig+0x650>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2202      	movs	r2, #2
 800358c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003590:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003594:	fa92 f2a2 	rbit	r2, r2
 8003598:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800359c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	f042 0220 	orr.w	r2, r2, #32
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f002 021f 	and.w	r2, r2, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1af      	bne.n	800351c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80da 	beq.w	8003780 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d069      	beq.n	80036aa <HAL_RCC_OscConfig+0x6da>
 80035d6:	2301      	movs	r3, #1
 80035d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x654>)
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	461a      	mov	r2, r3
 80035fc:	2301      	movs	r3, #1
 80035fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fd fb74 	bl	8000cec <HAL_GetTick>
 8003604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003608:	e00e      	b.n	8003628 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360a:	f7fd fb6f 	bl	8000cec <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d906      	bls.n	8003628 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e3d9      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	10908120 	.word	0x10908120
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800363a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800363e:	2202      	movs	r2, #2
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003668:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800366c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800366e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003672:	2102      	movs	r1, #2
 8003674:	6019      	str	r1, [r3, #0]
 8003676:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fa93 f1a3 	rbit	r1, r3
 8003680:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003684:	6019      	str	r1, [r3, #0]
  return result;
 8003686:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0b0      	beq.n	800360a <HAL_RCC_OscConfig+0x63a>
 80036a8:	e06a      	b.n	8003780 <HAL_RCC_OscConfig+0x7b0>
 80036aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fa93 f2a3 	rbit	r2, r3
 80036bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036c0:	601a      	str	r2, [r3, #0]
  return result;
 80036c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <HAL_RCC_OscConfig+0x934>)
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7fd fb06 	bl	8000cec <HAL_GetTick>
 80036e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e009      	b.n	80036fa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fd fb01 	bl	8000cec <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e36b      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 80036fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036fe:	2202      	movs	r2, #2
 8003700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	fa93 f2a3 	rbit	r2, r3
 800370c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003716:	2202      	movs	r2, #2
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800372e:	2202      	movs	r2, #2
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	fa93 f2a3 	rbit	r2, r3
 800373c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003740:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003742:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003746:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800374a:	2102      	movs	r1, #2
 800374c:	6019      	str	r1, [r3, #0]
 800374e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	fa93 f1a3 	rbit	r1, r3
 8003758:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800375c:	6019      	str	r1, [r3, #0]
  return result;
 800375e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1b2      	bne.n	80036e6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8158 	beq.w	8003a40 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d112      	bne.n	80037c8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	4b57      	ldr	r3, [pc, #348]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	61d3      	str	r3, [r2, #28]
 80037ae:	4b54      	ldr	r3, [pc, #336]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <HAL_RCC_OscConfig+0x938>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d11a      	bne.n	800380a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d4:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <HAL_RCC_OscConfig+0x938>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4b      	ldr	r2, [pc, #300]	; (8003908 <HAL_RCC_OscConfig+0x938>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e0:	f7fd fa84 	bl	8000cec <HAL_GetTick>
 80037e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	e009      	b.n	80037fe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fd fa7f 	bl	8000cec <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e2e9      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCC_OscConfig+0x938>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ef      	beq.n	80037ea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x852>
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4a39      	ldr	r2, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6213      	str	r3, [r2, #32]
 8003820:	e02f      	b.n	8003882 <HAL_RCC_OscConfig+0x8b2>
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_OscConfig+0x876>
 800382c:	4b34      	ldr	r3, [pc, #208]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a33      	ldr	r2, [pc, #204]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a30      	ldr	r2, [pc, #192]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800383e:	f023 0304 	bic.w	r3, r3, #4
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	e01d      	b.n	8003882 <HAL_RCC_OscConfig+0x8b2>
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d10c      	bne.n	800386a <HAL_RCC_OscConfig+0x89a>
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	e00b      	b.n	8003882 <HAL_RCC_OscConfig+0x8b2>
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a24      	ldr	r2, [pc, #144]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6213      	str	r3, [r2, #32]
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d06b      	beq.n	8003964 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fd fa2e 	bl	8000cec <HAL_GetTick>
 8003890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fd fa29 	bl	8000cec <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e291      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 80038ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038b2:	2202      	movs	r2, #2
 80038b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80038ca:	2202      	movs	r2, #2
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038dc:	601a      	str	r2, [r3, #0]
  return result;
 80038de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d109      	bne.n	800390c <HAL_RCC_OscConfig+0x93c>
 80038f8:	4b01      	ldr	r3, [pc, #4]	; (8003900 <HAL_RCC_OscConfig+0x930>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	e014      	b.n	8003928 <HAL_RCC_OscConfig+0x958>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	10908120 	.word	0x10908120
 8003908:	40007000 	.word	0x40007000
 800390c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003910:	2202      	movs	r2, #2
 8003912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	4bbb      	ldr	r3, [pc, #748]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800392c:	2102      	movs	r1, #2
 800392e:	6011      	str	r1, [r2, #0]
 8003930:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	fa92 f1a2 	rbit	r1, r2
 800393a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800393e:	6011      	str	r1, [r2, #0]
  return result;
 8003940:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d099      	beq.n	8003896 <HAL_RCC_OscConfig+0x8c6>
 8003962:	e063      	b.n	8003a2c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7fd f9c2 	bl	8000cec <HAL_GetTick>
 8003968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fd f9bd 	bl	8000cec <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e225      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003986:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800398a:	2202      	movs	r2, #2
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039a2:	2202      	movs	r2, #2
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	fa93 f2a3 	rbit	r2, r3
 80039b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039b4:	601a      	str	r2, [r3, #0]
  return result;
 80039b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d102      	bne.n	80039d6 <HAL_RCC_OscConfig+0xa06>
 80039d0:	4b90      	ldr	r3, [pc, #576]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	e00d      	b.n	80039f2 <HAL_RCC_OscConfig+0xa22>
 80039d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039da:	2202      	movs	r2, #2
 80039dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f2a3 	rbit	r2, r3
 80039e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	4b89      	ldr	r3, [pc, #548]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039f6:	2102      	movs	r1, #2
 80039f8:	6011      	str	r1, [r2, #0]
 80039fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	fa92 f1a2 	rbit	r1, r2
 8003a04:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003a08:	6011      	str	r1, [r2, #0]
  return result;
 8003a0a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f002 021f 	and.w	r2, r2, #31
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1a0      	bne.n	800396e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b77      	ldr	r3, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4a76      	ldr	r2, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 81c2 	beq.w	8003dd0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a4c:	4b71      	ldr	r3, [pc, #452]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	f000 819c 	beq.w	8003d92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f040 8114 	bne.w	8003c8e <HAL_RCC_OscConfig+0xcbe>
 8003a66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	fa93 f2a3 	rbit	r2, r3
 8003a7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a7e:	601a      	str	r2, [r3, #0]
  return result;
 8003a80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	461a      	mov	r2, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd f926 	bl	8000cec <HAL_GetTick>
 8003aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa4:	e009      	b.n	8003aba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fd f921 	bl	8000cec <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e18b      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003aba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	fa93 f2a3 	rbit	r2, r3
 8003ace:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ad2:	601a      	str	r2, [r3, #0]
  return result;
 8003ad4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ad8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d102      	bne.n	8003af4 <HAL_RCC_OscConfig+0xb24>
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	e01b      	b.n	8003b2c <HAL_RCC_OscConfig+0xb5c>
 8003af4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	fa93 f2a3 	rbit	r2, r3
 8003b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	fa93 f2a3 	rbit	r2, r3
 8003b22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b34:	6011      	str	r1, [r2, #0]
 8003b36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	fa92 f1a2 	rbit	r1, r2
 8003b40:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b44:	6011      	str	r1, [r2, #0]
  return result;
 8003b46:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	f042 0220 	orr.w	r2, r2, #32
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f002 021f 	and.w	r2, r2, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d19e      	bne.n	8003aa6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
 8003b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b9c:	601a      	str	r2, [r3, #0]
  return result;
 8003b9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ba2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fd f897 	bl	8000cec <HAL_GetTick>
 8003bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd f892 	bl	8000cec <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0fc      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003bd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bf0:	601a      	str	r2, [r3, #0]
  return result;
 8003bf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCC_OscConfig+0xc48>
 8003c0c:	4b01      	ldr	r3, [pc, #4]	; (8003c14 <HAL_RCC_OscConfig+0xc44>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	e01e      	b.n	8003c50 <HAL_RCC_OscConfig+0xc80>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	fa93 f2a3 	rbit	r2, r3
 8003c46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <HAL_RCC_OscConfig+0xe0c>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c58:	6011      	str	r1, [r2, #0]
 8003c5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	fa92 f1a2 	rbit	r1, r2
 8003c64:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c68:	6011      	str	r1, [r2, #0]
  return result;
 8003c6a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	fab2 f282 	clz	r2, r2
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f042 0220 	orr.w	r2, r2, #32
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	f002 021f 	and.w	r2, r2, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d09b      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xbf4>
 8003c8c:	e0a0      	b.n	8003dd0 <HAL_RCC_OscConfig+0xe00>
 8003c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	fa93 f2a3 	rbit	r2, r3
 8003ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca6:	601a      	str	r2, [r3, #0]
  return result;
 8003ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f812 	bl	8000cec <HAL_GetTick>
 8003cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fd f80d 	bl	8000cec <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e077      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
 8003ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cfa:	601a      	str	r2, [r3, #0]
  return result;
 8003cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_RCC_OscConfig+0xd4c>
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_RCC_OscConfig+0xe0c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	e01b      	b.n	8003d54 <HAL_RCC_OscConfig+0xd84>
 8003d1c:	f107 0320 	add.w	r3, r7, #32
 8003d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f107 0320 	add.w	r3, r7, #32
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fa93 f2a3 	rbit	r2, r3
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f107 0318 	add.w	r3, r7, #24
 8003d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	f107 0318 	add.w	r3, r7, #24
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	fa93 f2a3 	rbit	r2, r3
 8003d4a:	f107 0314 	add.w	r3, r7, #20
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_RCC_OscConfig+0xe0c>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f107 0210 	add.w	r2, r7, #16
 8003d58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d5c:	6011      	str	r1, [r2, #0]
 8003d5e:	f107 0210 	add.w	r2, r7, #16
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	fa92 f1a2 	rbit	r1, r2
 8003d68:	f107 020c 	add.w	r2, r7, #12
 8003d6c:	6011      	str	r1, [r2, #0]
  return result;
 8003d6e:	f107 020c 	add.w	r2, r7, #12
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	fab2 f282 	clz	r2, r2
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f042 0220 	orr.w	r2, r2, #32
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	f002 021f 	and.w	r2, r2, #31
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19e      	bne.n	8003cce <HAL_RCC_OscConfig+0xcfe>
 8003d90:	e01e      	b.n	8003dd0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0xe0c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003da8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003dba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000

08003de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b09e      	sub	sp, #120	; 0x78
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e162      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b90      	ldr	r3, [pc, #576]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d910      	bls.n	8003e28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b8d      	ldr	r3, [pc, #564]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 0207 	bic.w	r2, r3, #7
 8003e0e:	498b      	ldr	r1, [pc, #556]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b89      	ldr	r3, [pc, #548]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e14a      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b82      	ldr	r3, [pc, #520]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	497f      	ldr	r1, [pc, #508]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80dc 	beq.w	800400c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d13c      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xf6>
 8003e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xa6>
 8003e80:	4b6f      	ldr	r3, [pc, #444]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0xc6>
 8003e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	667b      	str	r3, [r7, #100]	; 0x64
 8003e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e98:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea2:	4b67      	ldr	r3, [pc, #412]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eaa:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eae:	fa92 f2a2 	rbit	r2, r2
 8003eb2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eb6:	fab2 f282 	clz	r2, r2
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f042 0220 	orr.w	r2, r2, #32
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f002 021f 	and.w	r2, r2, #31
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d17b      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0f3      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d13c      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x178>
 8003ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x128>
 8003f02:	4b4f      	ldr	r3, [pc, #316]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e00f      	b.n	8003f28 <HAL_RCC_ClockConfig+0x148>
 8003f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
 8003f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f24:	4b46      	ldr	r3, [pc, #280]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f30:	fa92 f2a2 	rbit	r2, r2
 8003f34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f002 021f 	and.w	r2, r2, #31
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d13a      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b2      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	e00d      	b.n	8003f9c <HAL_RCC_ClockConfig+0x1bc>
 8003f80:	2302      	movs	r3, #2
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	623b      	str	r3, [r7, #32]
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	4b29      	ldr	r3, [pc, #164]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	61ba      	str	r2, [r7, #24]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	fa92 f2a2 	rbit	r2, r2
 8003fa6:	617a      	str	r2, [r7, #20]
  return result;
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	fab2 f282 	clz	r2, r2
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f042 0220 	orr.w	r2, r2, #32
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	f002 021f 	and.w	r2, r2, #31
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e079      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	491a      	ldr	r1, [pc, #104]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7fc fe86 	bl	8000cec <HAL_GetTick>
 8003fe0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fc fe82 	bl	8000cec <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e061      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 020c 	and.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d1eb      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d214      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 0207 	bic.w	r2, r3, #7
 8004022:	4906      	ldr	r1, [pc, #24]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <HAL_RCC_ClockConfig+0x25c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e040      	b.n	80040be <HAL_RCC_ClockConfig+0x2de>
 800403c:	40022000 	.word	0x40022000
 8004040:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_RCC_ClockConfig+0x2e8>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	491a      	ldr	r1, [pc, #104]	; (80040c8 <HAL_RCC_ClockConfig+0x2e8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406e:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_RCC_ClockConfig+0x2e8>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4912      	ldr	r1, [pc, #72]	; (80040c8 <HAL_RCC_ClockConfig+0x2e8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004082:	f000 f829 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8004086:	4601      	mov	r1, r0
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <HAL_RCC_ClockConfig+0x2e8>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004090:	22f0      	movs	r2, #240	; 0xf0
 8004092:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	fa92 f2a2 	rbit	r2, r2
 800409a:	60fa      	str	r2, [r7, #12]
  return result;
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	fab2 f282 	clz	r2, r2
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	40d3      	lsrs	r3, r2
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x2ec>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	fa21 f303 	lsr.w	r3, r1, r3
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <HAL_RCC_ClockConfig+0x2f0>)
 80040b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_RCC_ClockConfig+0x2f4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fdd4 	bl	8000c64 <HAL_InitTick>
  
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3778      	adds	r7, #120	; 0x78
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08005bb0 	.word	0x08005bb0
 80040d0:	20000000 	.word	0x20000000
 80040d4:	20000004 	.word	0x20000004

080040d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b08b      	sub	sp, #44	; 0x2c
 80040dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d002      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x30>
 8004102:	2b08      	cmp	r3, #8
 8004104:	d003      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x36>
 8004106:	e03c      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004108:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_GetSysClockFreq+0xc4>)
 800410a:	623b      	str	r3, [r7, #32]
      break;
 800410c:	e03c      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004114:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004118:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	fa92 f2a2 	rbit	r2, r2
 8004120:	607a      	str	r2, [r7, #4]
  return result;
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	40d3      	lsrs	r3, r2
 800412c:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800412e:	5cd3      	ldrb	r3, [r2, r3]
 8004130:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	220f      	movs	r2, #15
 800413c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	fa92 f2a2 	rbit	r2, r2
 8004144:	60fa      	str	r2, [r7, #12]
  return result;
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	fab2 f282 	clz	r2, r2
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	40d3      	lsrs	r3, r2
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004152:	5cd3      	ldrb	r3, [r2, r3]
 8004154:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004160:	4a0e      	ldr	r2, [pc, #56]	; (800419c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	fbb2 f2f3 	udiv	r2, r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e004      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	623b      	str	r3, [r7, #32]
      break;
 8004180:	e002      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004184:	623b      	str	r3, [r7, #32]
      break;
 8004186:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004188:	6a3b      	ldr	r3, [r7, #32]
}
 800418a:	4618      	mov	r0, r3
 800418c:	372c      	adds	r7, #44	; 0x2c
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	007a1200 	.word	0x007a1200
 80041a0:	08005bc0 	.word	0x08005bc0
 80041a4:	08005bd0 	.word	0x08005bd0
 80041a8:	003d0900 	.word	0x003d0900

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b092      	sub	sp, #72	; 0x48
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80d4 	beq.w	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d0:	4b4e      	ldr	r3, [pc, #312]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10e      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	4b4b      	ldr	r3, [pc, #300]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e6:	61d3      	str	r3, [r2, #28]
 80041e8:	4b48      	ldr	r3, [pc, #288]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b45      	ldr	r3, [pc, #276]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a41      	ldr	r2, [pc, #260]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fc fd6b 	bl	8000cec <HAL_GetTick>
 8004216:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fc fd67 	bl	8000cec <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e169      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b38      	ldr	r3, [pc, #224]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004238:	4b34      	ldr	r3, [pc, #208]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8084 	beq.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004254:	429a      	cmp	r2, r3
 8004256:	d07c      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004258:	4b2c      	ldr	r3, [pc, #176]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	461a      	mov	r2, r3
 8004282:	2301      	movs	r3, #1
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	461a      	mov	r2, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042aa:	4a18      	ldr	r2, [pc, #96]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d04b      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fc fd17 	bl	8000cec <HAL_GetTick>
 80042be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fc fd13 	bl	8000cec <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e113      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80042d8:	2302      	movs	r3, #2
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	2302      	movs	r3, #2
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	61fb      	str	r3, [r7, #28]
  return result;
 80042f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d108      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004306:	4b01      	ldr	r3, [pc, #4]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	e00d      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
 8004314:	10908100 	.word	0x10908100
 8004318:	2302      	movs	r3, #2
 800431a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	4b78      	ldr	r3, [pc, #480]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2202      	movs	r2, #2
 800432a:	613a      	str	r2, [r7, #16]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	fa92 f2a2 	rbit	r2, r2
 8004332:	60fa      	str	r2, [r7, #12]
  return result;
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	fab2 f282 	clz	r2, r2
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f002 021f 	and.w	r2, r2, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f202 	lsl.w	r2, r1, r2
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0b7      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004352:	4b6d      	ldr	r3, [pc, #436]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	496a      	ldr	r1, [pc, #424]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004364:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436c:	4b66      	ldr	r3, [pc, #408]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004384:	4b60      	ldr	r3, [pc, #384]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	f023 0203 	bic.w	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	495d      	ldr	r1, [pc, #372]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a2:	4b59      	ldr	r3, [pc, #356]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4956      	ldr	r1, [pc, #344]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c0:	4b51      	ldr	r3, [pc, #324]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	494e      	ldr	r1, [pc, #312]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043de:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f023 0210 	bic.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4947      	ldr	r1, [pc, #284]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	493f      	ldr	r1, [pc, #252]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f023 0220 	bic.w	r2, r3, #32
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4938      	ldr	r1, [pc, #224]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004428:	4313      	orrs	r3, r2
 800442a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	4930      	ldr	r1, [pc, #192]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004446:	4313      	orrs	r3, r2
 8004448:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004456:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	4929      	ldr	r1, [pc, #164]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4921      	ldr	r1, [pc, #132]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	491a      	ldr	r1, [pc, #104]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	4912      	ldr	r1, [pc, #72]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	490b      	ldr	r1, [pc, #44]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3748      	adds	r7, #72	; 0x48
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000

0800450c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800451a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451e:	2b84      	cmp	r3, #132	; 0x84
 8004520:	d005      	beq.n	800452e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004522:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	3303      	adds	r3, #3
 800452c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004540:	f000 fb54 	bl	8004bec <vTaskStartScheduler>
  
  return osOK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	bd80      	pop	{r7, pc}

0800454a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800454a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454c:	b089      	sub	sp, #36	; 0x24
 800454e:	af04      	add	r7, sp, #16
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d020      	beq.n	800459e <osThreadCreate+0x54>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01c      	beq.n	800459e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685c      	ldr	r4, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681d      	ldr	r5, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691e      	ldr	r6, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ffc8 	bl	800450c <makeFreeRtosPriority>
 800457c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004586:	9202      	str	r2, [sp, #8]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	9100      	str	r1, [sp, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4632      	mov	r2, r6
 8004590:	4629      	mov	r1, r5
 8004592:	4620      	mov	r0, r4
 8004594:	f000 f8ed 	bl	8004772 <xTaskCreateStatic>
 8004598:	4603      	mov	r3, r0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e01c      	b.n	80045d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685c      	ldr	r4, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045aa:	b29e      	uxth	r6, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff ffaa 	bl	800450c <makeFreeRtosPriority>
 80045b8:	4602      	mov	r2, r0
 80045ba:	f107 030c 	add.w	r3, r7, #12
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	4632      	mov	r2, r6
 80045c6:	4629      	mov	r1, r5
 80045c8:	4620      	mov	r0, r4
 80045ca:	f000 f92e 	bl	800482a <xTaskCreate>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <osDelay+0x16>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	e000      	b.n	80045fa <osDelay+0x18>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fac2 	bl	8004b84 <vTaskDelay>
  
  return osOK;
 8004600:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f103 0208 	add.w	r2, r3, #8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f103 0208 	add.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f103 0208 	add.w	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e00c      	b.n	80046e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3308      	adds	r3, #8
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e002      	b.n	80046da <vListInsert+0x2e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d2f6      	bcs.n	80046d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6892      	ldr	r2, [r2, #8]
 8004734:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6852      	ldr	r2, [r2, #4]
 800473e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d103      	bne.n	8004752 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004772:	b580      	push	{r7, lr}
 8004774:	b08e      	sub	sp, #56	; 0x38
 8004776:	af04      	add	r7, sp, #16
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	61fb      	str	r3, [r7, #28]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047b8:	2354      	movs	r3, #84	; 0x54
 80047ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b54      	cmp	r3, #84	; 0x54
 80047c0:	d00a      	beq.n	80047d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	61bb      	str	r3, [r7, #24]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01e      	beq.n	800481c <xTaskCreateStatic+0xaa>
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047f6:	2300      	movs	r3, #0
 80047f8:	9303      	str	r3, [sp, #12]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f850 	bl	80048b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004816:	f000 f8cd 	bl	80049b4 <prvAddNewTaskToReadyList>
 800481a:	e001      	b.n	8004820 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004820:	697b      	ldr	r3, [r7, #20]
	}
 8004822:	4618      	mov	r0, r3
 8004824:	3728      	adds	r7, #40	; 0x28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08c      	sub	sp, #48	; 0x30
 800482e:	af04      	add	r7, sp, #16
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff7a 	bl	8005738 <pvPortMalloc>
 8004844:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800484c:	2054      	movs	r0, #84	; 0x54
 800484e:	f000 ff73 	bl	8005738 <pvPortMalloc>
 8004852:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
 8004860:	e005      	b.n	800486e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f001 f82c 	bl	80058c0 <vPortFree>
 8004868:	e001      	b.n	800486e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d017      	beq.n	80048a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	2300      	movs	r3, #0
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	9302      	str	r3, [sp, #8]
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f80e 	bl	80048b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004898:	69f8      	ldr	r0, [r7, #28]
 800489a:	f000 f88b 	bl	80049b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e002      	b.n	80048aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048aa:	69bb      	ldr	r3, [r7, #24]
	}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048cc:	3b01      	subs	r3, #1
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f023 0307 	bic.w	r3, r3, #7
 80048da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <prvInitialiseNewTask+0x48>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	e7fe      	b.n	80048fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e012      	b.n	8004928 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	7819      	ldrb	r1, [r3, #0]
 800490a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	3334      	adds	r3, #52	; 0x34
 8004912:	460a      	mov	r2, r1
 8004914:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d006      	beq.n	8004930 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d9e9      	bls.n	8004902 <prvInitialiseNewTask+0x4e>
 800492e:	e000      	b.n	8004932 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004930:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	2b06      	cmp	r3, #6
 800493e:	d901      	bls.n	8004944 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004940:	2306      	movs	r3, #6
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004948:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	2200      	movs	r2, #0
 8004954:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fe75 	bl	800464a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	3318      	adds	r3, #24
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fe70 	bl	800464a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f1c3 0207 	rsb	r2, r3, #7
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2200      	movs	r2, #0
 8004984:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	69b8      	ldr	r0, [r7, #24]
 8004994:	f000 fcbe 	bl	8005314 <pxPortInitialiseStack>
 8004998:	4602      	mov	r2, r0
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049aa:	bf00      	nop
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049bc:	f000 fdda 	bl	8005574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049c0:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <prvAddNewTaskToReadyList+0xb8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <prvAddNewTaskToReadyList+0xb8>)
 80049c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049d2:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <prvAddNewTaskToReadyList+0xb8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d110      	bne.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049e0:	f000 fb50 	bl	8005084 <prvInitialiseTaskLists>
 80049e4:	e00d      	b.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049e6:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <prvAddNewTaskToReadyList+0xc0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d802      	bhi.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <prvAddNewTaskToReadyList+0xc4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <prvAddNewTaskToReadyList+0xc4>)
 8004a0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	2201      	movs	r2, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <prvAddNewTaskToReadyList+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <prvAddNewTaskToReadyList+0xc8>)
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <prvAddNewTaskToReadyList+0xcc>)
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7ff fe15 	bl	8004664 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a3a:	f000 fdcb 	bl	80055d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <prvAddNewTaskToReadyList+0xc0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00e      	beq.n	8004a64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d207      	bcs.n	8004a64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <prvAddNewTaskToReadyList+0xd0>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000394 	.word	0x20000394
 8004a70:	20000294 	.word	0x20000294
 8004a74:	200003a0 	.word	0x200003a0
 8004a78:	200003b0 	.word	0x200003b0
 8004a7c:	2000039c 	.word	0x2000039c
 8004a80:	20000298 	.word	0x20000298
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	617b      	str	r3, [r7, #20]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <vTaskDelayUntil+0x46>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	613b      	str	r3, [r7, #16]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <vTaskDelayUntil+0xf0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <vTaskDelayUntil+0x64>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60fb      	str	r3, [r7, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004aec:	f000 f8de 	bl	8004cac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <vTaskDelayUntil+0xf4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d20b      	bcs.n	8004b22 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d211      	bcs.n	8004b38 <vTaskDelayUntil+0xb0>
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d90d      	bls.n	8004b38 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	e00a      	b.n	8004b38 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d303      	bcc.n	8004b34 <vTaskDelayUntil+0xac>
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d901      	bls.n	8004b38 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fb7b 	bl	8005248 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004b52:	f000 f8b9 	bl	8004cc8 <xTaskResumeAll>
 8004b56:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004b5e:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <vTaskDelayUntil+0xf8>)
 8004b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b6e:	bf00      	nop
 8004b70:	3728      	adds	r7, #40	; 0x28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200003bc 	.word	0x200003bc
 8004b7c:	20000398 	.word	0x20000398
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d017      	beq.n	8004bc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b96:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <vTaskDelay+0x60>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <vTaskDelay+0x30>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60bb      	str	r3, [r7, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bb4:	f000 f87a 	bl	8004cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bb8:	2100      	movs	r1, #0
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fb44 	bl	8005248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bc0:	f000 f882 	bl	8004cc8 <xTaskResumeAll>
 8004bc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <vTaskDelay+0x64>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200003bc 	.word	0x200003bc
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bfa:	463a      	mov	r2, r7
 8004bfc:	1d39      	adds	r1, r7, #4
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fae4 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	9202      	str	r2, [sp, #8]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	460a      	mov	r2, r1
 8004c1a:	491e      	ldr	r1, [pc, #120]	; (8004c94 <vTaskStartScheduler+0xa8>)
 8004c1c:	481e      	ldr	r0, [pc, #120]	; (8004c98 <vTaskStartScheduler+0xac>)
 8004c1e:	f7ff fda8 	bl	8004772 <xTaskCreateStatic>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <vTaskStartScheduler+0xb0>)
 8004c26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c28:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <vTaskStartScheduler+0xb0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e001      	b.n	8004c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d116      	bne.n	8004c6e <vTaskStartScheduler+0x82>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
}
 8004c52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <vTaskStartScheduler+0xb4>)
 8004c56:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <vTaskStartScheduler+0xb8>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <vTaskStartScheduler+0xbc>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c68:	f000 fbe2 	bl	8005430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c6c:	e00e      	b.n	8004c8c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d10a      	bne.n	8004c8c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <vTaskStartScheduler+0x9e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08005ba4 	.word	0x08005ba4
 8004c98:	08005055 	.word	0x08005055
 8004c9c:	200003b8 	.word	0x200003b8
 8004ca0:	200003b4 	.word	0x200003b4
 8004ca4:	200003a0 	.word	0x200003a0
 8004ca8:	20000398 	.word	0x20000398

08004cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <vTaskSuspendAll+0x18>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <vTaskSuspendAll+0x18>)
 8004cb8:	6013      	str	r3, [r2, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	200003bc 	.word	0x200003bc

08004cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cd6:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <xTaskResumeAll+0x114>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cf4:	f000 fc3e 	bl	8005574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cf8:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <xTaskResumeAll+0x114>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	4a37      	ldr	r2, [pc, #220]	; (8004ddc <xTaskResumeAll+0x114>)
 8004d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d02:	4b36      	ldr	r3, [pc, #216]	; (8004ddc <xTaskResumeAll+0x114>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d161      	bne.n	8004dce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d0a:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <xTaskResumeAll+0x118>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d05d      	beq.n	8004dce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d12:	e02e      	b.n	8004d72 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <xTaskResumeAll+0x11c>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3318      	adds	r3, #24
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fcfc 	bl	800471e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fcf7 	bl	800471e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	2201      	movs	r2, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <xTaskResumeAll+0x120>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <xTaskResumeAll+0x120>)
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4a27      	ldr	r2, [pc, #156]	; (8004dec <xTaskResumeAll+0x124>)
 8004d50:	441a      	add	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7ff fc83 	bl	8004664 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <xTaskResumeAll+0x128>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <xTaskResumeAll+0x12c>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <xTaskResumeAll+0x11c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1cc      	bne.n	8004d14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d80:	f000 fa1e 	bl	80051c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d84:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <xTaskResumeAll+0x130>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d90:	f000 f846 	bl	8004e20 <xTaskIncrementTick>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d9a:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <xTaskResumeAll+0x12c>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f1      	bne.n	8004d90 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <xTaskResumeAll+0x130>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <xTaskResumeAll+0x12c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <xTaskResumeAll+0x134>)
 8004dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dce:	f000 fc01 	bl	80055d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	200003bc 	.word	0x200003bc
 8004de0:	20000394 	.word	0x20000394
 8004de4:	20000354 	.word	0x20000354
 8004de8:	2000039c 	.word	0x2000039c
 8004dec:	20000298 	.word	0x20000298
 8004df0:	20000294 	.word	0x20000294
 8004df4:	200003a8 	.word	0x200003a8
 8004df8:	200003a4 	.word	0x200003a4
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <xTaskGetTickCount+0x1c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e0c:	687b      	ldr	r3, [r7, #4]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000398 	.word	0x20000398

08004e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e2a:	4b51      	ldr	r3, [pc, #324]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f040 808d 	bne.w	8004f4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e34:	4b4f      	ldr	r3, [pc, #316]	; (8004f74 <xTaskIncrementTick+0x154>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e3c:	4a4d      	ldr	r2, [pc, #308]	; (8004f74 <xTaskIncrementTick+0x154>)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d120      	bne.n	8004e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e48:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	603b      	str	r3, [r7, #0]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xTaskIncrementTick+0x46>
 8004e68:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a41      	ldr	r2, [pc, #260]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4a41      	ldr	r2, [pc, #260]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <xTaskIncrementTick+0x160>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <xTaskIncrementTick+0x160>)
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	f000 f99b 	bl	80051c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e8a:	4b3e      	ldr	r3, [pc, #248]	; (8004f84 <xTaskIncrementTick+0x164>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d34d      	bcc.n	8004f30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e94:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <xTaskIncrementTick+0x82>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <xTaskIncrementTick+0x84>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea8:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <xTaskIncrementTick+0x164>)
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	601a      	str	r2, [r3, #0]
					break;
 8004eb0:	e03e      	b.n	8004f30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004eb2:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d203      	bcs.n	8004ed2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eca:	4a2e      	ldr	r2, [pc, #184]	; (8004f84 <xTaskIncrementTick+0x164>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6013      	str	r3, [r2, #0]
						break;
 8004ed0:	e02e      	b.n	8004f30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fc21 	bl	800471e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3318      	adds	r3, #24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fc18 	bl	800471e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <xTaskIncrementTick+0x168>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <xTaskIncrementTick+0x168>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <xTaskIncrementTick+0x16c>)
 8004f0e:	441a      	add	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7ff fba4 	bl	8004664 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <xTaskIncrementTick+0x170>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3b4      	bcc.n	8004e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2e:	e7b1      	b.n	8004e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <xTaskIncrementTick+0x170>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	4915      	ldr	r1, [pc, #84]	; (8004f8c <xTaskIncrementTick+0x16c>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d907      	bls.n	8004f58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e004      	b.n	8004f58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f4e:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <xTaskIncrementTick+0x174>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <xTaskIncrementTick+0x174>)
 8004f56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <xTaskIncrementTick+0x178>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f64:	697b      	ldr	r3, [r7, #20]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200003bc 	.word	0x200003bc
 8004f74:	20000398 	.word	0x20000398
 8004f78:	2000034c 	.word	0x2000034c
 8004f7c:	20000350 	.word	0x20000350
 8004f80:	200003ac 	.word	0x200003ac
 8004f84:	200003b4 	.word	0x200003b4
 8004f88:	2000039c 	.word	0x2000039c
 8004f8c:	20000298 	.word	0x20000298
 8004f90:	20000294 	.word	0x20000294
 8004f94:	200003a4 	.word	0x200003a4
 8004f98:	200003a8 	.word	0x200003a8

08004f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fa2:	4b27      	ldr	r3, [pc, #156]	; (8005040 <vTaskSwitchContext+0xa4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <vTaskSwitchContext+0xa8>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fb0:	e03f      	b.n	8005032 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <vTaskSwitchContext+0xa8>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <vTaskSwitchContext+0xac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	fab3 f383 	clz	r3, r3
 8004fc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	f1c3 031f 	rsb	r3, r3, #31
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	491f      	ldr	r1, [pc, #124]	; (800504c <vTaskSwitchContext+0xb0>)
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	607b      	str	r3, [r7, #4]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <vTaskSwitchContext+0x5a>
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <vTaskSwitchContext+0xb0>)
 8005004:	4413      	add	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3308      	adds	r3, #8
 800501a:	429a      	cmp	r2, r3
 800501c:	d104      	bne.n	8005028 <vTaskSwitchContext+0x8c>
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <vTaskSwitchContext+0xb4>)
 8005030:	6013      	str	r3, [r2, #0]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	200003bc 	.word	0x200003bc
 8005044:	200003a8 	.word	0x200003a8
 8005048:	2000039c 	.word	0x2000039c
 800504c:	20000298 	.word	0x20000298
 8005050:	20000294 	.word	0x20000294

08005054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800505c:	f000 f852 	bl	8005104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <prvIdleTask+0x28>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d9f9      	bls.n	800505c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <prvIdleTask+0x2c>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005078:	e7f0      	b.n	800505c <prvIdleTask+0x8>
 800507a:	bf00      	nop
 800507c:	20000298 	.word	0x20000298
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	e00c      	b.n	80050aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <prvInitialiseTaskLists+0x60>)
 800509c:	4413      	add	r3, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fab3 	bl	800460a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3301      	adds	r3, #1
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d9ef      	bls.n	8005090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050b0:	480d      	ldr	r0, [pc, #52]	; (80050e8 <prvInitialiseTaskLists+0x64>)
 80050b2:	f7ff faaa 	bl	800460a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050b6:	480d      	ldr	r0, [pc, #52]	; (80050ec <prvInitialiseTaskLists+0x68>)
 80050b8:	f7ff faa7 	bl	800460a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050bc:	480c      	ldr	r0, [pc, #48]	; (80050f0 <prvInitialiseTaskLists+0x6c>)
 80050be:	f7ff faa4 	bl	800460a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050c2:	480c      	ldr	r0, [pc, #48]	; (80050f4 <prvInitialiseTaskLists+0x70>)
 80050c4:	f7ff faa1 	bl	800460a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050c8:	480b      	ldr	r0, [pc, #44]	; (80050f8 <prvInitialiseTaskLists+0x74>)
 80050ca:	f7ff fa9e 	bl	800460a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <prvInitialiseTaskLists+0x78>)
 80050d0:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <prvInitialiseTaskLists+0x64>)
 80050d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvInitialiseTaskLists+0x7c>)
 80050d6:	4a05      	ldr	r2, [pc, #20]	; (80050ec <prvInitialiseTaskLists+0x68>)
 80050d8:	601a      	str	r2, [r3, #0]
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000298 	.word	0x20000298
 80050e8:	20000324 	.word	0x20000324
 80050ec:	20000338 	.word	0x20000338
 80050f0:	20000354 	.word	0x20000354
 80050f4:	20000368 	.word	0x20000368
 80050f8:	20000380 	.word	0x20000380
 80050fc:	2000034c 	.word	0x2000034c
 8005100:	20000350 	.word	0x20000350

08005104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800510a:	e019      	b.n	8005140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800510c:	f000 fa32 	bl	8005574 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <prvCheckTasksWaitingTermination+0x50>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fafe 	bl	800471e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <prvCheckTasksWaitingTermination+0x54>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3b01      	subs	r3, #1
 8005128:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <prvCheckTasksWaitingTermination+0x54>)
 800512a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <prvCheckTasksWaitingTermination+0x58>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3b01      	subs	r3, #1
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <prvCheckTasksWaitingTermination+0x58>)
 8005134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005136:	f000 fa4d 	bl	80055d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f810 	bl	8005160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <prvCheckTasksWaitingTermination+0x58>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e1      	bne.n	800510c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000368 	.word	0x20000368
 8005158:	20000394 	.word	0x20000394
 800515c:	2000037c 	.word	0x2000037c

08005160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800516e:	2b00      	cmp	r3, #0
 8005170:	d108      	bne.n	8005184 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fba2 	bl	80058c0 <vPortFree>
				vPortFree( pxTCB );
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fb9f 	bl	80058c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005182:	e018      	b.n	80051b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518a:	2b01      	cmp	r3, #1
 800518c:	d103      	bne.n	8005196 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fb96 	bl	80058c0 <vPortFree>
	}
 8005194:	e00f      	b.n	80051b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800519c:	2b02      	cmp	r3, #2
 800519e:	d00a      	beq.n	80051b6 <prvDeleteTCB+0x56>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <prvDeleteTCB+0x54>
	}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <prvResetNextTaskUnblockTime+0x44>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <prvResetNextTaskUnblockTime+0x14>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <prvResetNextTaskUnblockTime+0x16>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <prvResetNextTaskUnblockTime+0x48>)
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295
 80051e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e2:	e008      	b.n	80051f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <prvResetNextTaskUnblockTime+0x44>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4a05      	ldr	r2, [pc, #20]	; (8005208 <prvResetNextTaskUnblockTime+0x48>)
 80051f4:	6013      	str	r3, [r2, #0]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	2000034c 	.word	0x2000034c
 8005208:	200003b4 	.word	0x200003b4

0800520c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <xTaskGetSchedulerState+0x34>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800521a:	2301      	movs	r3, #1
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	e008      	b.n	8005232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <xTaskGetSchedulerState+0x38>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005228:	2302      	movs	r3, #2
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	e001      	b.n	8005232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005232:	687b      	ldr	r3, [r7, #4]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	200003a0 	.word	0x200003a0
 8005244:	200003bc 	.word	0x200003bc

08005248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3304      	adds	r3, #4
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fa5d 	bl	800471e <uxListRemove>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	2201      	movs	r2, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43da      	mvns	r2, r3
 8005278:	4b21      	ldr	r3, [pc, #132]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4013      	ands	r3, r2
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005280:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d10a      	bne.n	80052a0 <prvAddCurrentTaskToDelayedList+0x58>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	481a      	ldr	r0, [pc, #104]	; (8005304 <prvAddCurrentTaskToDelayedList+0xbc>)
 800529a:	f7ff f9e3 	bl	8004664 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800529e:	e026      	b.n	80052ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d209      	bcs.n	80052cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7ff f9f1 	bl	80046ac <vListInsert>
}
 80052ca:	e010      	b.n	80052ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <prvAddCurrentTaskToDelayedList+0xc4>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff f9e7 	bl	80046ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d202      	bcs.n	80052ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6013      	str	r3, [r2, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000398 	.word	0x20000398
 80052fc:	20000294 	.word	0x20000294
 8005300:	2000039c 	.word	0x2000039c
 8005304:	20000380 	.word	0x20000380
 8005308:	20000350 	.word	0x20000350
 800530c:	2000034c 	.word	0x2000034c
 8005310:	200003b4 	.word	0x200003b4

08005314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b04      	subs	r3, #4
 8005324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800532c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b04      	subs	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b04      	subs	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005344:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <pxPortInitialiseStack+0x64>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3b14      	subs	r3, #20
 800534e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3b04      	subs	r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f06f 0202 	mvn.w	r2, #2
 8005362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3b20      	subs	r3, #32
 8005368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	0800537d 	.word	0x0800537d

0800537c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <prvTaskExitError+0x54>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d00a      	beq.n	80053a6 <prvTaskExitError+0x2a>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <prvTaskExitError+0x28>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60bb      	str	r3, [r7, #8]
}
 80053b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053ba:	bf00      	nop
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0fc      	beq.n	80053bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	2000000c 	.word	0x2000000c
	...

080053e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <pxCurrentTCBConst2>)
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	6808      	ldr	r0, [r1, #0]
 80053e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	f380 8809 	msr	PSP, r0
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	4770      	bx	lr
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst2>:
 8005400:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005408:	4808      	ldr	r0, [pc, #32]	; (800542c <prvPortStartFirstTask+0x24>)
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f380 8808 	msr	MSP, r0
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8814 	msr	CONTROL, r0
 800541a:	b662      	cpsie	i
 800541c:	b661      	cpsie	f
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	df00      	svc	0
 8005428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800542a:	bf00      	nop
 800542c:	e000ed08 	.word	0xe000ed08

08005430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005436:	4b46      	ldr	r3, [pc, #280]	; (8005550 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a46      	ldr	r2, [pc, #280]	; (8005554 <xPortStartScheduler+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x26>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <xPortStartScheduler+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3f      	ldr	r2, [pc, #252]	; (8005558 <xPortStartScheduler+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10a      	bne.n	8005476 <xPortStartScheduler+0x46>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005476:	4b39      	ldr	r3, [pc, #228]	; (800555c <xPortStartScheduler+0x12c>)
 8005478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <xPortStartScheduler+0x130>)
 800549c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <xPortStartScheduler+0x134>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054a4:	e009      	b.n	80054ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054a6:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <xPortStartScheduler+0x134>)
 80054ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d0ef      	beq.n	80054a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054c6:	4b27      	ldr	r3, [pc, #156]	; (8005564 <xPortStartScheduler+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1c3 0307 	rsb	r3, r3, #7
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d00a      	beq.n	80054e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <xPortStartScheduler+0x134>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <xPortStartScheduler+0x134>)
 80054f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <xPortStartScheduler+0x134>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054fa:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <xPortStartScheduler+0x134>)
 80054fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005506:	4b18      	ldr	r3, [pc, #96]	; (8005568 <xPortStartScheduler+0x138>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <xPortStartScheduler+0x138>)
 800550c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <xPortStartScheduler+0x138>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <xPortStartScheduler+0x138>)
 8005518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800551c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800551e:	f000 f8dd 	bl	80056dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <xPortStartScheduler+0x13c>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005528:	f000 f8fc 	bl	8005724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <xPortStartScheduler+0x140>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <xPortStartScheduler+0x140>)
 8005532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005538:	f7ff ff66 	bl	8005408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800553c:	f7ff fd2e 	bl	8004f9c <vTaskSwitchContext>
	prvTaskExitError();
 8005540:	f7ff ff1c 	bl	800537c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	e000ed00 	.word	0xe000ed00
 8005554:	410fc271 	.word	0x410fc271
 8005558:	410fc270 	.word	0x410fc270
 800555c:	e000e400 	.word	0xe000e400
 8005560:	200003c0 	.word	0x200003c0
 8005564:	200003c4 	.word	0x200003c4
 8005568:	e000ed20 	.word	0xe000ed20
 800556c:	2000000c 	.word	0x2000000c
 8005570:	e000ef34 	.word	0xe000ef34

08005574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <vPortEnterCritical+0x58>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a0d      	ldr	r2, [pc, #52]	; (80055cc <vPortEnterCritical+0x58>)
 8005596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <vPortEnterCritical+0x58>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10f      	bne.n	80055c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortEnterCritical+0x5c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <vPortEnterCritical+0x4a>
	}
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <vPortExitCritical+0x50>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <vPortExitCritical+0x24>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <vPortExitCritical+0x50>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <vPortExitCritical+0x50>)
 8005600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <vPortExitCritical+0x50>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <vPortExitCritical+0x42>
 800560a:	2300      	movs	r3, #0
 800560c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
	...

08005630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005630:	f3ef 8009 	mrs	r0, PSP
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4b15      	ldr	r3, [pc, #84]	; (8005690 <pxCurrentTCBConst>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f01e 0f10 	tst.w	lr, #16
 8005640:	bf08      	it	eq
 8005642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	6010      	str	r0, [r2, #0]
 800564c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005654:	f380 8811 	msr	BASEPRI, r0
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f7ff fc9c 	bl	8004f9c <vTaskSwitchContext>
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f380 8811 	msr	BASEPRI, r0
 800566c:	bc09      	pop	{r0, r3}
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005676:	f01e 0f10 	tst.w	lr, #16
 800567a:	bf08      	it	eq
 800567c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005680:	f380 8809 	msr	PSP, r0
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst>:
 8005690:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7ff fbb5 	bl	8004e20 <xTaskIncrementTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <xPortSysTickHandler+0x40>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <vPortSetupTimerInterrupt+0x38>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <vPortSetupTimerInterrupt+0x3c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <vPortSetupTimerInterrupt+0x40>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vPortSetupTimerInterrupt+0x44>)
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056fe:	4b04      	ldr	r3, [pc, #16]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010
 8005714:	e000e018 	.word	0xe000e018
 8005718:	20000000 	.word	0x20000000
 800571c:	10624dd3 	.word	0x10624dd3
 8005720:	e000e014 	.word	0xe000e014

08005724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005734 <vPortEnableVFP+0x10>
 8005728:	6801      	ldr	r1, [r0, #0]
 800572a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800572e:	6001      	str	r1, [r0, #0]
 8005730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005732:	bf00      	nop
 8005734:	e000ed88 	.word	0xe000ed88

08005738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005744:	f7ff fab2 	bl	8004cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005748:	4b58      	ldr	r3, [pc, #352]	; (80058ac <pvPortMalloc+0x174>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005750:	f000 f910 	bl	8005974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005754:	4b56      	ldr	r3, [pc, #344]	; (80058b0 <pvPortMalloc+0x178>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 808e 	bne.w	800587e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01d      	beq.n	80057a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005768:	2208      	movs	r2, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d014      	beq.n	80057a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f023 0307 	bic.w	r3, r3, #7
 8005780:	3308      	adds	r3, #8
 8005782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <pvPortMalloc+0x6c>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	617b      	str	r3, [r7, #20]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d069      	beq.n	800587e <pvPortMalloc+0x146>
 80057aa:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <pvPortMalloc+0x17c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d864      	bhi.n	800587e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057b4:	4b40      	ldr	r3, [pc, #256]	; (80058b8 <pvPortMalloc+0x180>)
 80057b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057b8:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <pvPortMalloc+0x180>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057be:	e004      	b.n	80057ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d903      	bls.n	80057dc <pvPortMalloc+0xa4>
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f1      	bne.n	80057c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057dc:	4b33      	ldr	r3, [pc, #204]	; (80058ac <pvPortMalloc+0x174>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d04b      	beq.n	800587e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2208      	movs	r2, #8
 80057ec:	4413      	add	r3, r2
 80057ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	2308      	movs	r3, #8
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	429a      	cmp	r2, r3
 8005806:	d91f      	bls.n	8005848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <pvPortMalloc+0xf8>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	613b      	str	r3, [r7, #16]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005842:	69b8      	ldr	r0, [r7, #24]
 8005844:	f000 f8f8 	bl	8005a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005848:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <pvPortMalloc+0x17c>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <pvPortMalloc+0x17c>)
 8005854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <pvPortMalloc+0x17c>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <pvPortMalloc+0x184>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d203      	bcs.n	800586a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005862:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <pvPortMalloc+0x17c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <pvPortMalloc+0x184>)
 8005868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <pvPortMalloc+0x178>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	431a      	orrs	r2, r3
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800587e:	f7ff fa23 	bl	8004cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <pvPortMalloc+0x16a>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60fb      	str	r3, [r7, #12]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <pvPortMalloc+0x168>
	return pvReturn;
 80058a2:	69fb      	ldr	r3, [r7, #28]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3728      	adds	r7, #40	; 0x28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000fd0 	.word	0x20000fd0
 80058b0:	20000fdc 	.word	0x20000fdc
 80058b4:	20000fd4 	.word	0x20000fd4
 80058b8:	20000fc8 	.word	0x20000fc8
 80058bc:	20000fd8 	.word	0x20000fd8

080058c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d048      	beq.n	8005964 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058d2:	2308      	movs	r3, #8
 80058d4:	425b      	negs	r3, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <vPortFree+0xac>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <vPortFree+0x44>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <vPortFree+0x62>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60bb      	str	r3, [r7, #8]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4b11      	ldr	r3, [pc, #68]	; (800596c <vPortFree+0xac>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d019      	beq.n	8005964 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d115      	bne.n	8005964 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <vPortFree+0xac>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005948:	f7ff f9b0 	bl	8004cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <vPortFree+0xb0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4413      	add	r3, r2
 8005956:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vPortFree+0xb0>)
 8005958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800595a:	6938      	ldr	r0, [r7, #16]
 800595c:	f000 f86c 	bl	8005a38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005960:	f7ff f9b2 	bl	8004cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000fdc 	.word	0x20000fdc
 8005970:	20000fd4 	.word	0x20000fd4

08005974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800597a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800597e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <prvHeapInit+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <prvHeapInit+0xac>)
 80059a4:	4413      	add	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <prvHeapInit+0xb0>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <prvHeapInit+0xb0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059c0:	2208      	movs	r2, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <prvHeapInit+0xb4>)
 80059d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <prvHeapInit+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <prvHeapInit+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvHeapInit+0xb4>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <prvHeapInit+0xb8>)
 8005a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <prvHeapInit+0xbc>)
 8005a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <prvHeapInit+0xc0>)
 8005a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	200003c8 	.word	0x200003c8
 8005a24:	20000fc8 	.word	0x20000fc8
 8005a28:	20000fd0 	.word	0x20000fd0
 8005a2c:	20000fd8 	.word	0x20000fd8
 8005a30:	20000fd4 	.word	0x20000fd4
 8005a34:	20000fdc 	.word	0x20000fdc

08005a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <prvInsertBlockIntoFreeList+0xac>)
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e002      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x14>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d8f7      	bhi.n	8005a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d108      	bne.n	8005a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d118      	bne.n	8005ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00d      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e003      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d002      	beq.n	8005ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000fc8 	.word	0x20000fc8
 8005ae8:	20000fd0 	.word	0x20000fd0

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	; (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	; (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	; (8005b30 <__libc_init_array+0x44>)
 8005b00:	f000 f820 	bl	8005b44 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08005be0 	.word	0x08005be0
 8005b28:	08005be0 	.word	0x08005be0
 8005b2c:	08005be0 	.word	0x08005be0
 8005b30:	08005be4 	.word	0x08005be4

08005b34 <memset>:
 8005b34:	4402      	add	r2, r0
 8005b36:	4603      	mov	r3, r0
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d100      	bne.n	8005b3e <memset+0xa>
 8005b3c:	4770      	bx	lr
 8005b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b42:	e7f9      	b.n	8005b38 <memset+0x4>

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
