
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002160  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002330  08002330  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002330  08002330  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002330  08002330  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  080023a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080023a8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a3a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012dd  00000000  00000000  00024ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  00025db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00026248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017095  00000000  00000000  00026638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050de  00000000  00000000  0003d6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081240  00000000  00000000  000427ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c39eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f8  00000000  00000000  000c3a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002254 	.word	0x08002254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002254 	.word	0x08002254

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9e6 	bl	8000520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f814 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f854 	bl	8000204 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800015c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000160:	4805      	ldr	r0, [pc, #20]	; (8000178 <main+0x2c>)
 8000162:	f000 fce3 	bl	8000b2c <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8000166:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800016a:	f000 fa3b 	bl	80005e4 <HAL_Delay>
		printf("hello world");
 800016e:	4803      	ldr	r0, [pc, #12]	; (800017c <main+0x30>)
 8000170:	f001 f910 	bl	8001394 <iprintf>
	while (1) {
 8000174:	e7f2      	b.n	800015c <main+0x10>
 8000176:	bf00      	nop
 8000178:	40011000 	.word	0x40011000
 800017c:	0800226c 	.word	0x0800226c

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	; 0x40
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0318 	add.w	r3, r7, #24
 800018a:	2228      	movs	r2, #40	; 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f001 f8f8 	bl	8001384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a2:	2302      	movs	r3, #2
 80001a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001aa:	2310      	movs	r3, #16
 80001ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ae:	2302      	movs	r3, #2
 80001b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b2:	2300      	movs	r3, #0
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fccd 	bl	8000b60 <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001cc:	f000 f87e 	bl	80002cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 ff38 	bl	8001060 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f6:	f000 f869 	bl	80002cc <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000218:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <MX_GPIO_Init+0xbc>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <MX_GPIO_Init+0xbc>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <MX_GPIO_Init+0xbc>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0310 	and.w	r3, r3, #16
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000230:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <MX_GPIO_Init+0xbc>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <MX_GPIO_Init+0xbc>)
 8000236:	f043 0320 	orr.w	r3, r3, #32
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <MX_GPIO_Init+0xbc>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <MX_GPIO_Init+0xbc>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <MX_GPIO_Init+0xbc>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <MX_GPIO_Init+0xbc>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0304 	and.w	r3, r3, #4
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <MX_GPIO_Init+0xbc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <MX_GPIO_Init+0xbc>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <MX_GPIO_Init+0xbc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0308 	and.w	r3, r3, #8
 8000274:	603b      	str	r3, [r7, #0]
 8000276:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <MX_GPIO_Init+0xc0>)
 8000280:	f000 fc3c 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028a:	2301      	movs	r3, #1
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000292:	2303      	movs	r3, #3
 8000294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	4619      	mov	r1, r3
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <MX_GPIO_Init+0xc0>)
 800029e:	f000 faa9 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80002a2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80002a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a8:	2303      	movs	r3, #3
 80002aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	4619      	mov	r1, r3
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_GPIO_Init+0xc4>)
 80002b4:	f000 fa9e 	bl	80007f4 <HAL_GPIO_Init>

}
 80002b8:	bf00      	nop
 80002ba:	3720      	adds	r7, #32
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40011000 	.word	0x40011000
 80002c8:	40010c00 	.word	0x40010c00

080002cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d0:	b672      	cpsid	i
}
 80002d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80002d4:	e7fe      	b.n	80002d4 <Error_Handler+0x8>
	...

080002d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <HAL_MspInit+0x5c>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a14      	ldr	r2, [pc, #80]	; (8000334 <HAL_MspInit+0x5c>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <HAL_MspInit+0x5c>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <HAL_MspInit+0x5c>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <HAL_MspInit+0x5c>)
 80002fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000300:	61d3      	str	r3, [r2, #28]
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <HAL_MspInit+0x5c>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <HAL_MspInit+0x60>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <HAL_MspInit+0x60>)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000
 8000338:	40010000 	.word	0x40010000

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <NMI_Handler+0x4>

08000342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <HardFault_Handler+0x4>

08000348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <MemManage_Handler+0x4>

0800034e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>

0800035a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000382:	f000 f913 	bl	80005ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}

0800038a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b086      	sub	sp, #24
 800038e:	af00      	add	r7, sp, #0
 8000390:	60f8      	str	r0, [r7, #12]
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e00a      	b.n	80003b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800039c:	f3af 8000 	nop.w
 80003a0:	4601      	mov	r1, r0
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	60ba      	str	r2, [r7, #8]
 80003a8:	b2ca      	uxtb	r2, r1
 80003aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	3301      	adds	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	dbf0      	blt.n	800039c <_read+0x12>
	}

return len;
 80003ba:	687b      	ldr	r3, [r7, #4]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e009      	b.n	80003ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	60ba      	str	r2, [r7, #8]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697a      	ldr	r2, [r7, #20]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dbf1      	blt.n	80003d6 <_write+0x12>
	}
	return len;
 80003f2:	687b      	ldr	r3, [r7, #4]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <_close>:

int _close(int file)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	return -1;
 8000404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000422:	605a      	str	r2, [r3, #4]
	return 0;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <_isatty>:

int _isatty(int file)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	return 1;
 8000438:	2301      	movs	r3, #1
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	return 0;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <_sbrk+0x5c>)
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <_sbrk+0x60>)
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d102      	bne.n	800047e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <_sbrk+0x64>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <_sbrk+0x68>)
 800047c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	693a      	ldr	r2, [r7, #16]
 8000488:	429a      	cmp	r2, r3
 800048a:	d207      	bcs.n	800049c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800048c:	f000 ff50 	bl	8001330 <__errno>
 8000490:	4603      	mov	r3, r0
 8000492:	220c      	movs	r2, #12
 8000494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800049a:	e009      	b.n	80004b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <_sbrk+0x64>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <_sbrk+0x64>)
 80004ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ae:	68fb      	ldr	r3, [r7, #12]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20005000 	.word	0x20005000
 80004bc:	00000400 	.word	0x00000400
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	200000b0 	.word	0x200000b0

080004c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004d6:	490d      	ldr	r1, [pc, #52]	; (800050c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004ec:	4c0a      	ldr	r4, [pc, #40]	; (8000518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004fa:	f7ff ffe5 	bl	80004c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fe:	f000 ff1d 	bl	800133c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff fe23 	bl	800014c <main>
  bx lr
 8000506:	4770      	bx	lr
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000510:	08002338 	.word	0x08002338
  ldr r2, =_sbss
 8000514:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000518:	200000ac 	.word	0x200000ac

0800051c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC1_2_IRQHandler>
	...

08000520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_Init+0x28>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_Init+0x28>)
 800052a:	f043 0310 	orr.w	r3, r3, #16
 800052e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f92b 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000536:	200f      	movs	r0, #15
 8000538:	f000 f808 	bl	800054c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800053c:	f7ff fecc 	bl	80002d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40022000 	.word	0x40022000

0800054c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x54>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_InitTick+0x58>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	fbb3 f3f1 	udiv	r3, r3, r1
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f935 	bl	80007da <HAL_SYSTICK_Config>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e00e      	b.n	8000598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d80a      	bhi.n	8000596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000588:	f000 f90b 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <HAL_InitTick+0x5c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_IncTick+0x1c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x20>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <HAL_IncTick+0x20>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000098 	.word	0x20000098

080005d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <HAL_GetTick+0x10>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20000098 	.word	0x20000098

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff fff0 	bl	80005d0 <HAL_GetTick>
 80005f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005fc:	d005      	beq.n	800060a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_Delay+0x44>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060a:	bf00      	nop
 800060c:	f7ff ffe0 	bl	80005d0 <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d8f7      	bhi.n	800060c <HAL_Delay+0x28>
  {
  }
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000008 	.word	0x20000008

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff49 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff5e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffb0 	bl	8000748 <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000806:	e169      	b.n	8000adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000808:	2201      	movs	r2, #1
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	4013      	ands	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8158 	bne.w	8000ad6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4a9a      	ldr	r2, [pc, #616]	; (8000a94 <HAL_GPIO_Init+0x2a0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d05e      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000830:	4a98      	ldr	r2, [pc, #608]	; (8000a94 <HAL_GPIO_Init+0x2a0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d875      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 8000836:	4a98      	ldr	r2, [pc, #608]	; (8000a98 <HAL_GPIO_Init+0x2a4>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d058      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 800083c:	4a96      	ldr	r2, [pc, #600]	; (8000a98 <HAL_GPIO_Init+0x2a4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d86f      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 8000842:	4a96      	ldr	r2, [pc, #600]	; (8000a9c <HAL_GPIO_Init+0x2a8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d052      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000848:	4a94      	ldr	r2, [pc, #592]	; (8000a9c <HAL_GPIO_Init+0x2a8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d869      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 800084e:	4a94      	ldr	r2, [pc, #592]	; (8000aa0 <HAL_GPIO_Init+0x2ac>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d04c      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000854:	4a92      	ldr	r2, [pc, #584]	; (8000aa0 <HAL_GPIO_Init+0x2ac>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d863      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 800085a:	4a92      	ldr	r2, [pc, #584]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d046      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000860:	4a90      	ldr	r2, [pc, #576]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d85d      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 8000866:	2b12      	cmp	r3, #18
 8000868:	d82a      	bhi.n	80008c0 <HAL_GPIO_Init+0xcc>
 800086a:	2b12      	cmp	r3, #18
 800086c:	d859      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 800086e:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <HAL_GPIO_Init+0x80>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	080008ef 	.word	0x080008ef
 8000878:	080008c9 	.word	0x080008c9
 800087c:	080008db 	.word	0x080008db
 8000880:	0800091d 	.word	0x0800091d
 8000884:	08000923 	.word	0x08000923
 8000888:	08000923 	.word	0x08000923
 800088c:	08000923 	.word	0x08000923
 8000890:	08000923 	.word	0x08000923
 8000894:	08000923 	.word	0x08000923
 8000898:	08000923 	.word	0x08000923
 800089c:	08000923 	.word	0x08000923
 80008a0:	08000923 	.word	0x08000923
 80008a4:	08000923 	.word	0x08000923
 80008a8:	08000923 	.word	0x08000923
 80008ac:	08000923 	.word	0x08000923
 80008b0:	08000923 	.word	0x08000923
 80008b4:	08000923 	.word	0x08000923
 80008b8:	080008d1 	.word	0x080008d1
 80008bc:	080008e5 	.word	0x080008e5
 80008c0:	4a79      	ldr	r2, [pc, #484]	; (8000aa8 <HAL_GPIO_Init+0x2b4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d013      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008c6:	e02c      	b.n	8000922 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	623b      	str	r3, [r7, #32]
          break;
 80008ce:	e029      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	3304      	adds	r3, #4
 80008d6:	623b      	str	r3, [r7, #32]
          break;
 80008d8:	e024      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	3308      	adds	r3, #8
 80008e0:	623b      	str	r3, [r7, #32]
          break;
 80008e2:	e01f      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	330c      	adds	r3, #12
 80008ea:	623b      	str	r3, [r7, #32]
          break;
 80008ec:	e01a      	b.n	8000924 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008f6:	2304      	movs	r3, #4
 80008f8:	623b      	str	r3, [r7, #32]
          break;
 80008fa:	e013      	b.n	8000924 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d105      	bne.n	8000910 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000904:	2308      	movs	r3, #8
 8000906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	611a      	str	r2, [r3, #16]
          break;
 800090e:	e009      	b.n	8000924 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000910:	2308      	movs	r3, #8
 8000912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	615a      	str	r2, [r3, #20]
          break;
 800091a:	e003      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
          break;
 8000920:	e000      	b.n	8000924 <HAL_GPIO_Init+0x130>
          break;
 8000922:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d801      	bhi.n	800092e <HAL_GPIO_Init+0x13a>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	e001      	b.n	8000932 <HAL_GPIO_Init+0x13e>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3304      	adds	r3, #4
 8000932:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2bff      	cmp	r3, #255	; 0xff
 8000938:	d802      	bhi.n	8000940 <HAL_GPIO_Init+0x14c>
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	e002      	b.n	8000946 <HAL_GPIO_Init+0x152>
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	3b08      	subs	r3, #8
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	210f      	movs	r1, #15
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	6a39      	ldr	r1, [r7, #32]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	431a      	orrs	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 80b1 	beq.w	8000ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <HAL_GPIO_Init+0x2b8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a4c      	ldr	r2, [pc, #304]	; (8000aac <HAL_GPIO_Init+0x2b8>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <HAL_GPIO_Init+0x2b8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800098c:	4a48      	ldr	r2, [pc, #288]	; (8000ab0 <HAL_GPIO_Init+0x2bc>)
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	3302      	adds	r3, #2
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a40      	ldr	r2, [pc, #256]	; (8000ab4 <HAL_GPIO_Init+0x2c0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d013      	beq.n	80009e0 <HAL_GPIO_Init+0x1ec>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3f      	ldr	r2, [pc, #252]	; (8000ab8 <HAL_GPIO_Init+0x2c4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d00d      	beq.n	80009dc <HAL_GPIO_Init+0x1e8>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3e      	ldr	r2, [pc, #248]	; (8000abc <HAL_GPIO_Init+0x2c8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3d      	ldr	r2, [pc, #244]	; (8000ac0 <HAL_GPIO_Init+0x2cc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <HAL_GPIO_Init+0x1e0>
 80009d0:	2303      	movs	r3, #3
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009d4:	2304      	movs	r3, #4
 80009d6:	e004      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009d8:	2302      	movs	r3, #2
 80009da:	e002      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009e0:	2300      	movs	r3, #0
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	f002 0203 	and.w	r2, r2, #3
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009f2:	492f      	ldr	r1, [pc, #188]	; (8000ab0 <HAL_GPIO_Init+0x2bc>)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	492c      	ldr	r1, [pc, #176]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	600b      	str	r3, [r1, #0]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4928      	ldr	r1, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	4922      	ldr	r1, [pc, #136]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	604b      	str	r3, [r1, #4]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	491e      	ldr	r1, [pc, #120]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	4918      	ldr	r1, [pc, #96]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	608b      	str	r3, [r1, #8]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	4914      	ldr	r1, [pc, #80]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60cb      	str	r3, [r1, #12]
 8000a90:	e021      	b.n	8000ad6 <HAL_GPIO_Init+0x2e2>
 8000a92:	bf00      	nop
 8000a94:	10320000 	.word	0x10320000
 8000a98:	10310000 	.word	0x10310000
 8000a9c:	10220000 	.word	0x10220000
 8000aa0:	10210000 	.word	0x10210000
 8000aa4:	10120000 	.word	0x10120000
 8000aa8:	10110000 	.word	0x10110000
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40011400 	.word	0x40011400
 8000ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_GPIO_Init+0x304>)
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4909      	ldr	r1, [pc, #36]	; (8000af8 <HAL_GPIO_Init+0x304>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	3301      	adds	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f47f ae8e 	bne.w	8000808 <HAL_GPIO_Init+0x14>
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	372c      	adds	r7, #44	; 0x2c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40010400 	.word	0x40010400

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4013      	ands	r3, r2
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43d9      	mvns	r1, r3
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	400b      	ands	r3, r1
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	611a      	str	r2, [r3, #16]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e26c      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8087 	beq.w	8000c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b80:	4b92      	ldr	r3, [pc, #584]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00c      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b8c:	4b8f      	ldr	r3, [pc, #572]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d112      	bne.n	8000bbe <HAL_RCC_OscConfig+0x5e>
 8000b98:	4b8c      	ldr	r3, [pc, #560]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d10b      	bne.n	8000bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba6:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d06c      	beq.n	8000c8c <HAL_RCC_OscConfig+0x12c>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d168      	bne.n	8000c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e246      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc6:	d106      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x76>
 8000bc8:	4b80      	ldr	r3, [pc, #512]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7f      	ldr	r2, [pc, #508]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e02e      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x98>
 8000bde:	4b7b      	ldr	r3, [pc, #492]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7a      	ldr	r2, [pc, #488]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	4b78      	ldr	r3, [pc, #480]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a77      	ldr	r2, [pc, #476]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e01d      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c00:	d10c      	bne.n	8000c1c <HAL_RCC_OscConfig+0xbc>
 8000c02:	4b72      	ldr	r3, [pc, #456]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a71      	ldr	r2, [pc, #452]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a6e      	ldr	r2, [pc, #440]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e00b      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000c1c:	4b6b      	ldr	r3, [pc, #428]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a6a      	ldr	r2, [pc, #424]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b68      	ldr	r3, [pc, #416]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a67      	ldr	r2, [pc, #412]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d013      	beq.n	8000c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fcc8 	bl	80005d0 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fcc4 	bl	80005d0 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	; 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e1fa      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c56:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0xe4>
 8000c62:	e014      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fcb4 	bl	80005d0 <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fcb0 	bl	80005d0 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	; 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e1e6      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f0      	bne.n	8000c6c <HAL_RCC_OscConfig+0x10c>
 8000c8a:	e000      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d063      	beq.n	8000d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c9a:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d11c      	bne.n	8000cec <HAL_RCC_OscConfig+0x18c>
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d116      	bne.n	8000cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x176>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d001      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e1ba      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4939      	ldr	r1, [pc, #228]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	e03a      	b.n	8000d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d020      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fc69 	bl	80005d0 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fc65 	bl	80005d0 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e19b      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f0      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4927      	ldr	r1, [pc, #156]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
 8000d34:	e015      	b.n	8000d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <HAL_RCC_OscConfig+0x270>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc48 	bl	80005d0 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d44:	f7ff fc44 	bl	80005d0 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e17a      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d03a      	beq.n	8000de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d019      	beq.n	8000daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc28 	bl	80005d0 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc24 	bl	80005d0 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e15a      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 faa6 	bl	80012f4 <RCC_Delay>
 8000da8:	e01c      	b.n	8000de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc0e 	bl	80005d0 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db6:	e00f      	b.n	8000dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc0a 	bl	80005d0 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d908      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e140      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	42420000 	.word	0x42420000
 8000dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd8:	4b9e      	ldr	r3, [pc, #632]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e9      	bne.n	8000db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a6 	beq.w	8000f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df6:	4b97      	ldr	r3, [pc, #604]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10d      	bne.n	8000e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b94      	ldr	r3, [pc, #592]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a93      	ldr	r2, [pc, #588]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b91      	ldr	r3, [pc, #580]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1e:	4b8e      	ldr	r3, [pc, #568]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d118      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a8a      	ldr	r2, [pc, #552]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fbcb 	bl	80005d0 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3e:	f7ff fbc7 	bl	80005d0 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e0fd      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e50:	4b81      	ldr	r3, [pc, #516]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d106      	bne.n	8000e72 <HAL_RCC_OscConfig+0x312>
 8000e64:	4b7b      	ldr	r3, [pc, #492]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4a7a      	ldr	r2, [pc, #488]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6213      	str	r3, [r2, #32]
 8000e70:	e02d      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x334>
 8000e7a:	4b76      	ldr	r3, [pc, #472]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a75      	ldr	r2, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	4b73      	ldr	r3, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a72      	ldr	r2, [pc, #456]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	f023 0304 	bic.w	r3, r3, #4
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	e01c      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x356>
 8000e9c:	4b6d      	ldr	r3, [pc, #436]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a6c      	ldr	r2, [pc, #432]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4a69      	ldr	r2, [pc, #420]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6213      	str	r3, [r2, #32]
 8000eb4:	e00b      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000eb6:	4b67      	ldr	r3, [pc, #412]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a66      	ldr	r2, [pc, #408]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	4b64      	ldr	r3, [pc, #400]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a63      	ldr	r2, [pc, #396]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d015      	beq.n	8000f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fb7b 	bl	80005d0 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff fb77 	bl	80005d0 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e0ab      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	4b57      	ldr	r3, [pc, #348]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0ee      	beq.n	8000ede <HAL_RCC_OscConfig+0x37e>
 8000f00:	e014      	b.n	8000f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fb65 	bl	80005d0 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb61 	bl	80005d0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e095      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ee      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d105      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f32:	4b48      	ldr	r3, [pc, #288]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a47      	ldr	r2, [pc, #284]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8081 	beq.w	800104a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f48:	4b42      	ldr	r3, [pc, #264]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d061      	beq.n	8001018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d146      	bne.n	8000fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <HAL_RCC_OscConfig+0x4fc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb35 	bl	80005d0 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb31 	bl	80005d0 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e067      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d108      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f92:	4b30      	ldr	r3, [pc, #192]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	492d      	ldr	r1, [pc, #180]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a19      	ldr	r1, [r3, #32]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	4927      	ldr	r1, [pc, #156]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_RCC_OscConfig+0x4fc>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb05 	bl	80005d0 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb01 	bl	80005d0 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e037      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x46a>
 8000fe8:	e02f      	b.n	800104a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_RCC_OscConfig+0x4fc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff faee 	bl	80005d0 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff faea 	bl	80005d0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e020      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x498>
 8001016:	e018      	b.n	800104a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e013      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	429a      	cmp	r2, r3
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	40007000 	.word	0x40007000
 800105c:	42420060 	.word	0x42420060

08001060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0d0      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d910      	bls.n	80010a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	4b67      	ldr	r3, [pc, #412]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 0207 	bic.w	r2, r3, #7
 800108a:	4965      	ldr	r1, [pc, #404]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0b8      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a58      	ldr	r2, [pc, #352]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d040      	beq.n	8001180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e07f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e073      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06b      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f023 0203 	bic.w	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4936      	ldr	r1, [pc, #216]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fa3e 	bl	80005d0 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	e00a      	b.n	800116e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001158:	f7ff fa3a 	bl	80005d0 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f241 3288 	movw	r2, #5000	; 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e053      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 020c 	and.w	r2, r3, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	429a      	cmp	r2, r3
 800117e:	d1eb      	bne.n	8001158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d210      	bcs.n	80011b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0207 	bic.w	r2, r3, #7
 8001196:	4922      	ldr	r1, [pc, #136]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e032      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4916      	ldr	r1, [pc, #88]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ee:	f000 f821 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 80011f2:	4602      	mov	r2, r0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	5ccb      	ldrb	r3, [r1, r3]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1cc>)
 8001208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_RCC_ClockConfig+0x1d0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f99c 	bl	800054c <HAL_InitTick>

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000
 8001224:	40021000 	.word	0x40021000
 8001228:	08002288 	.word	0x08002288
 800122c:	20000000 	.word	0x20000000
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	b490      	push	{r4, r7}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800123c:	1d3c      	adds	r4, r7, #4
 800123e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001244:	f240 2301 	movw	r3, #513	; 0x201
 8001248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d002      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0x40>
 800126e:	2b08      	cmp	r3, #8
 8001270:	d003      	beq.n	800127a <HAL_RCC_GetSysClockFreq+0x46>
 8001272:	e02d      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001276:	623b      	str	r3, [r7, #32]
      break;
 8001278:	e02d      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001286:	4413      	add	r3, r2
 8001288:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800128c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	0c5b      	lsrs	r3, r3, #17
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012a6:	4413      	add	r3, r2
 80012a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80012b2:	fb02 f203 	mul.w	r2, r2, r3
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	e004      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	623b      	str	r3, [r7, #32]
      break;
 80012ce:	e002      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80012d2:	623b      	str	r3, [r7, #32]
      break;
 80012d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d6:	6a3b      	ldr	r3, [r7, #32]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	08002278 	.word	0x08002278
 80012e8:	40021000 	.word	0x40021000
 80012ec:	007a1200 	.word	0x007a1200
 80012f0:	003d0900 	.word	0x003d0900

080012f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <RCC_Delay+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <RCC_Delay+0x38>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0a5b      	lsrs	r3, r3, #9
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001310:	bf00      	nop
  }
  while (Delay --);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	60fa      	str	r2, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <RCC_Delay+0x1c>
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000
 800132c:	10624dd3 	.word	0x10624dd3

08001330 <__errno>:
 8001330:	4b01      	ldr	r3, [pc, #4]	; (8001338 <__errno+0x8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2000000c 	.word	0x2000000c

0800133c <__libc_init_array>:
 800133c:	b570      	push	{r4, r5, r6, lr}
 800133e:	2600      	movs	r6, #0
 8001340:	4d0c      	ldr	r5, [pc, #48]	; (8001374 <__libc_init_array+0x38>)
 8001342:	4c0d      	ldr	r4, [pc, #52]	; (8001378 <__libc_init_array+0x3c>)
 8001344:	1b64      	subs	r4, r4, r5
 8001346:	10a4      	asrs	r4, r4, #2
 8001348:	42a6      	cmp	r6, r4
 800134a:	d109      	bne.n	8001360 <__libc_init_array+0x24>
 800134c:	f000 ff82 	bl	8002254 <_init>
 8001350:	2600      	movs	r6, #0
 8001352:	4d0a      	ldr	r5, [pc, #40]	; (800137c <__libc_init_array+0x40>)
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <__libc_init_array+0x44>)
 8001356:	1b64      	subs	r4, r4, r5
 8001358:	10a4      	asrs	r4, r4, #2
 800135a:	42a6      	cmp	r6, r4
 800135c:	d105      	bne.n	800136a <__libc_init_array+0x2e>
 800135e:	bd70      	pop	{r4, r5, r6, pc}
 8001360:	f855 3b04 	ldr.w	r3, [r5], #4
 8001364:	4798      	blx	r3
 8001366:	3601      	adds	r6, #1
 8001368:	e7ee      	b.n	8001348 <__libc_init_array+0xc>
 800136a:	f855 3b04 	ldr.w	r3, [r5], #4
 800136e:	4798      	blx	r3
 8001370:	3601      	adds	r6, #1
 8001372:	e7f2      	b.n	800135a <__libc_init_array+0x1e>
 8001374:	08002330 	.word	0x08002330
 8001378:	08002330 	.word	0x08002330
 800137c:	08002330 	.word	0x08002330
 8001380:	08002334 	.word	0x08002334

08001384 <memset>:
 8001384:	4603      	mov	r3, r0
 8001386:	4402      	add	r2, r0
 8001388:	4293      	cmp	r3, r2
 800138a:	d100      	bne.n	800138e <memset+0xa>
 800138c:	4770      	bx	lr
 800138e:	f803 1b01 	strb.w	r1, [r3], #1
 8001392:	e7f9      	b.n	8001388 <memset+0x4>

08001394 <iprintf>:
 8001394:	b40f      	push	{r0, r1, r2, r3}
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <iprintf+0x2c>)
 8001398:	b513      	push	{r0, r1, r4, lr}
 800139a:	681c      	ldr	r4, [r3, #0]
 800139c:	b124      	cbz	r4, 80013a8 <iprintf+0x14>
 800139e:	69a3      	ldr	r3, [r4, #24]
 80013a0:	b913      	cbnz	r3, 80013a8 <iprintf+0x14>
 80013a2:	4620      	mov	r0, r4
 80013a4:	f000 f866 	bl	8001474 <__sinit>
 80013a8:	ab05      	add	r3, sp, #20
 80013aa:	4620      	mov	r0, r4
 80013ac:	9a04      	ldr	r2, [sp, #16]
 80013ae:	68a1      	ldr	r1, [r4, #8]
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f000 f981 	bl	80016b8 <_vfiprintf_r>
 80013b6:	b002      	add	sp, #8
 80013b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013bc:	b004      	add	sp, #16
 80013be:	4770      	bx	lr
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <std>:
 80013c4:	2300      	movs	r3, #0
 80013c6:	b510      	push	{r4, lr}
 80013c8:	4604      	mov	r4, r0
 80013ca:	e9c0 3300 	strd	r3, r3, [r0]
 80013ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013d2:	6083      	str	r3, [r0, #8]
 80013d4:	8181      	strh	r1, [r0, #12]
 80013d6:	6643      	str	r3, [r0, #100]	; 0x64
 80013d8:	81c2      	strh	r2, [r0, #14]
 80013da:	6183      	str	r3, [r0, #24]
 80013dc:	4619      	mov	r1, r3
 80013de:	2208      	movs	r2, #8
 80013e0:	305c      	adds	r0, #92	; 0x5c
 80013e2:	f7ff ffcf 	bl	8001384 <memset>
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <std+0x38>)
 80013e8:	6224      	str	r4, [r4, #32]
 80013ea:	6263      	str	r3, [r4, #36]	; 0x24
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <std+0x3c>)
 80013ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <std+0x40>)
 80013f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <std+0x44>)
 80013f6:	6323      	str	r3, [r4, #48]	; 0x30
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	bf00      	nop
 80013fc:	08001c65 	.word	0x08001c65
 8001400:	08001c87 	.word	0x08001c87
 8001404:	08001cbf 	.word	0x08001cbf
 8001408:	08001ce3 	.word	0x08001ce3

0800140c <_cleanup_r>:
 800140c:	4901      	ldr	r1, [pc, #4]	; (8001414 <_cleanup_r+0x8>)
 800140e:	f000 b8af 	b.w	8001570 <_fwalk_reent>
 8001412:	bf00      	nop
 8001414:	08001fbd 	.word	0x08001fbd

08001418 <__sfmoreglue>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	2568      	movs	r5, #104	; 0x68
 800141c:	1e4a      	subs	r2, r1, #1
 800141e:	4355      	muls	r5, r2
 8001420:	460e      	mov	r6, r1
 8001422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001426:	f000 f8c5 	bl	80015b4 <_malloc_r>
 800142a:	4604      	mov	r4, r0
 800142c:	b140      	cbz	r0, 8001440 <__sfmoreglue+0x28>
 800142e:	2100      	movs	r1, #0
 8001430:	e9c0 1600 	strd	r1, r6, [r0]
 8001434:	300c      	adds	r0, #12
 8001436:	60a0      	str	r0, [r4, #8]
 8001438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800143c:	f7ff ffa2 	bl	8001384 <memset>
 8001440:	4620      	mov	r0, r4
 8001442:	bd70      	pop	{r4, r5, r6, pc}

08001444 <__sfp_lock_acquire>:
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <__sfp_lock_acquire+0x8>)
 8001446:	f000 b8b3 	b.w	80015b0 <__retarget_lock_acquire_recursive>
 800144a:	bf00      	nop
 800144c:	200000a4 	.word	0x200000a4

08001450 <__sfp_lock_release>:
 8001450:	4801      	ldr	r0, [pc, #4]	; (8001458 <__sfp_lock_release+0x8>)
 8001452:	f000 b8ae 	b.w	80015b2 <__retarget_lock_release_recursive>
 8001456:	bf00      	nop
 8001458:	200000a4 	.word	0x200000a4

0800145c <__sinit_lock_acquire>:
 800145c:	4801      	ldr	r0, [pc, #4]	; (8001464 <__sinit_lock_acquire+0x8>)
 800145e:	f000 b8a7 	b.w	80015b0 <__retarget_lock_acquire_recursive>
 8001462:	bf00      	nop
 8001464:	2000009f 	.word	0x2000009f

08001468 <__sinit_lock_release>:
 8001468:	4801      	ldr	r0, [pc, #4]	; (8001470 <__sinit_lock_release+0x8>)
 800146a:	f000 b8a2 	b.w	80015b2 <__retarget_lock_release_recursive>
 800146e:	bf00      	nop
 8001470:	2000009f 	.word	0x2000009f

08001474 <__sinit>:
 8001474:	b510      	push	{r4, lr}
 8001476:	4604      	mov	r4, r0
 8001478:	f7ff fff0 	bl	800145c <__sinit_lock_acquire>
 800147c:	69a3      	ldr	r3, [r4, #24]
 800147e:	b11b      	cbz	r3, 8001488 <__sinit+0x14>
 8001480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001484:	f7ff bff0 	b.w	8001468 <__sinit_lock_release>
 8001488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800148c:	6523      	str	r3, [r4, #80]	; 0x50
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <__sinit+0x68>)
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <__sinit+0x6c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	62a2      	str	r2, [r4, #40]	; 0x28
 8001496:	42a3      	cmp	r3, r4
 8001498:	bf08      	it	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	4620      	mov	r0, r4
 800149e:	bf08      	it	eq
 80014a0:	61a3      	streq	r3, [r4, #24]
 80014a2:	f000 f81f 	bl	80014e4 <__sfp>
 80014a6:	6060      	str	r0, [r4, #4]
 80014a8:	4620      	mov	r0, r4
 80014aa:	f000 f81b 	bl	80014e4 <__sfp>
 80014ae:	60a0      	str	r0, [r4, #8]
 80014b0:	4620      	mov	r0, r4
 80014b2:	f000 f817 	bl	80014e4 <__sfp>
 80014b6:	2200      	movs	r2, #0
 80014b8:	2104      	movs	r1, #4
 80014ba:	60e0      	str	r0, [r4, #12]
 80014bc:	6860      	ldr	r0, [r4, #4]
 80014be:	f7ff ff81 	bl	80013c4 <std>
 80014c2:	2201      	movs	r2, #1
 80014c4:	2109      	movs	r1, #9
 80014c6:	68a0      	ldr	r0, [r4, #8]
 80014c8:	f7ff ff7c 	bl	80013c4 <std>
 80014cc:	2202      	movs	r2, #2
 80014ce:	2112      	movs	r1, #18
 80014d0:	68e0      	ldr	r0, [r4, #12]
 80014d2:	f7ff ff77 	bl	80013c4 <std>
 80014d6:	2301      	movs	r3, #1
 80014d8:	61a3      	str	r3, [r4, #24]
 80014da:	e7d1      	b.n	8001480 <__sinit+0xc>
 80014dc:	08002298 	.word	0x08002298
 80014e0:	0800140d 	.word	0x0800140d

080014e4 <__sfp>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	4607      	mov	r7, r0
 80014e8:	f7ff ffac 	bl	8001444 <__sfp_lock_acquire>
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <__sfp+0x84>)
 80014ee:	681e      	ldr	r6, [r3, #0]
 80014f0:	69b3      	ldr	r3, [r6, #24]
 80014f2:	b913      	cbnz	r3, 80014fa <__sfp+0x16>
 80014f4:	4630      	mov	r0, r6
 80014f6:	f7ff ffbd 	bl	8001474 <__sinit>
 80014fa:	3648      	adds	r6, #72	; 0x48
 80014fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001500:	3b01      	subs	r3, #1
 8001502:	d503      	bpl.n	800150c <__sfp+0x28>
 8001504:	6833      	ldr	r3, [r6, #0]
 8001506:	b30b      	cbz	r3, 800154c <__sfp+0x68>
 8001508:	6836      	ldr	r6, [r6, #0]
 800150a:	e7f7      	b.n	80014fc <__sfp+0x18>
 800150c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001510:	b9d5      	cbnz	r5, 8001548 <__sfp+0x64>
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <__sfp+0x88>)
 8001514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001518:	60e3      	str	r3, [r4, #12]
 800151a:	6665      	str	r5, [r4, #100]	; 0x64
 800151c:	f000 f847 	bl	80015ae <__retarget_lock_init_recursive>
 8001520:	f7ff ff96 	bl	8001450 <__sfp_lock_release>
 8001524:	2208      	movs	r2, #8
 8001526:	4629      	mov	r1, r5
 8001528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800152c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001530:	6025      	str	r5, [r4, #0]
 8001532:	61a5      	str	r5, [r4, #24]
 8001534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001538:	f7ff ff24 	bl	8001384 <memset>
 800153c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001544:	4620      	mov	r0, r4
 8001546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001548:	3468      	adds	r4, #104	; 0x68
 800154a:	e7d9      	b.n	8001500 <__sfp+0x1c>
 800154c:	2104      	movs	r1, #4
 800154e:	4638      	mov	r0, r7
 8001550:	f7ff ff62 	bl	8001418 <__sfmoreglue>
 8001554:	4604      	mov	r4, r0
 8001556:	6030      	str	r0, [r6, #0]
 8001558:	2800      	cmp	r0, #0
 800155a:	d1d5      	bne.n	8001508 <__sfp+0x24>
 800155c:	f7ff ff78 	bl	8001450 <__sfp_lock_release>
 8001560:	230c      	movs	r3, #12
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	e7ee      	b.n	8001544 <__sfp+0x60>
 8001566:	bf00      	nop
 8001568:	08002298 	.word	0x08002298
 800156c:	ffff0001 	.word	0xffff0001

08001570 <_fwalk_reent>:
 8001570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001574:	4606      	mov	r6, r0
 8001576:	4688      	mov	r8, r1
 8001578:	2700      	movs	r7, #0
 800157a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800157e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001582:	f1b9 0901 	subs.w	r9, r9, #1
 8001586:	d505      	bpl.n	8001594 <_fwalk_reent+0x24>
 8001588:	6824      	ldr	r4, [r4, #0]
 800158a:	2c00      	cmp	r4, #0
 800158c:	d1f7      	bne.n	800157e <_fwalk_reent+0xe>
 800158e:	4638      	mov	r0, r7
 8001590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001594:	89ab      	ldrh	r3, [r5, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d907      	bls.n	80015aa <_fwalk_reent+0x3a>
 800159a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800159e:	3301      	adds	r3, #1
 80015a0:	d003      	beq.n	80015aa <_fwalk_reent+0x3a>
 80015a2:	4629      	mov	r1, r5
 80015a4:	4630      	mov	r0, r6
 80015a6:	47c0      	blx	r8
 80015a8:	4307      	orrs	r7, r0
 80015aa:	3568      	adds	r5, #104	; 0x68
 80015ac:	e7e9      	b.n	8001582 <_fwalk_reent+0x12>

080015ae <__retarget_lock_init_recursive>:
 80015ae:	4770      	bx	lr

080015b0 <__retarget_lock_acquire_recursive>:
 80015b0:	4770      	bx	lr

080015b2 <__retarget_lock_release_recursive>:
 80015b2:	4770      	bx	lr

080015b4 <_malloc_r>:
 80015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b6:	1ccd      	adds	r5, r1, #3
 80015b8:	f025 0503 	bic.w	r5, r5, #3
 80015bc:	3508      	adds	r5, #8
 80015be:	2d0c      	cmp	r5, #12
 80015c0:	bf38      	it	cc
 80015c2:	250c      	movcc	r5, #12
 80015c4:	2d00      	cmp	r5, #0
 80015c6:	4606      	mov	r6, r0
 80015c8:	db01      	blt.n	80015ce <_malloc_r+0x1a>
 80015ca:	42a9      	cmp	r1, r5
 80015cc:	d903      	bls.n	80015d6 <_malloc_r+0x22>
 80015ce:	230c      	movs	r3, #12
 80015d0:	6033      	str	r3, [r6, #0]
 80015d2:	2000      	movs	r0, #0
 80015d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015d6:	f000 fdb1 	bl	800213c <__malloc_lock>
 80015da:	4921      	ldr	r1, [pc, #132]	; (8001660 <_malloc_r+0xac>)
 80015dc:	680a      	ldr	r2, [r1, #0]
 80015de:	4614      	mov	r4, r2
 80015e0:	b99c      	cbnz	r4, 800160a <_malloc_r+0x56>
 80015e2:	4f20      	ldr	r7, [pc, #128]	; (8001664 <_malloc_r+0xb0>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b923      	cbnz	r3, 80015f2 <_malloc_r+0x3e>
 80015e8:	4621      	mov	r1, r4
 80015ea:	4630      	mov	r0, r6
 80015ec:	f000 fb2a 	bl	8001c44 <_sbrk_r>
 80015f0:	6038      	str	r0, [r7, #0]
 80015f2:	4629      	mov	r1, r5
 80015f4:	4630      	mov	r0, r6
 80015f6:	f000 fb25 	bl	8001c44 <_sbrk_r>
 80015fa:	1c43      	adds	r3, r0, #1
 80015fc:	d123      	bne.n	8001646 <_malloc_r+0x92>
 80015fe:	230c      	movs	r3, #12
 8001600:	4630      	mov	r0, r6
 8001602:	6033      	str	r3, [r6, #0]
 8001604:	f000 fda0 	bl	8002148 <__malloc_unlock>
 8001608:	e7e3      	b.n	80015d2 <_malloc_r+0x1e>
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	1b5b      	subs	r3, r3, r5
 800160e:	d417      	bmi.n	8001640 <_malloc_r+0x8c>
 8001610:	2b0b      	cmp	r3, #11
 8001612:	d903      	bls.n	800161c <_malloc_r+0x68>
 8001614:	6023      	str	r3, [r4, #0]
 8001616:	441c      	add	r4, r3
 8001618:	6025      	str	r5, [r4, #0]
 800161a:	e004      	b.n	8001626 <_malloc_r+0x72>
 800161c:	6863      	ldr	r3, [r4, #4]
 800161e:	42a2      	cmp	r2, r4
 8001620:	bf0c      	ite	eq
 8001622:	600b      	streq	r3, [r1, #0]
 8001624:	6053      	strne	r3, [r2, #4]
 8001626:	4630      	mov	r0, r6
 8001628:	f000 fd8e 	bl	8002148 <__malloc_unlock>
 800162c:	f104 000b 	add.w	r0, r4, #11
 8001630:	1d23      	adds	r3, r4, #4
 8001632:	f020 0007 	bic.w	r0, r0, #7
 8001636:	1ac2      	subs	r2, r0, r3
 8001638:	d0cc      	beq.n	80015d4 <_malloc_r+0x20>
 800163a:	1a1b      	subs	r3, r3, r0
 800163c:	50a3      	str	r3, [r4, r2]
 800163e:	e7c9      	b.n	80015d4 <_malloc_r+0x20>
 8001640:	4622      	mov	r2, r4
 8001642:	6864      	ldr	r4, [r4, #4]
 8001644:	e7cc      	b.n	80015e0 <_malloc_r+0x2c>
 8001646:	1cc4      	adds	r4, r0, #3
 8001648:	f024 0403 	bic.w	r4, r4, #3
 800164c:	42a0      	cmp	r0, r4
 800164e:	d0e3      	beq.n	8001618 <_malloc_r+0x64>
 8001650:	1a21      	subs	r1, r4, r0
 8001652:	4630      	mov	r0, r6
 8001654:	f000 faf6 	bl	8001c44 <_sbrk_r>
 8001658:	3001      	adds	r0, #1
 800165a:	d1dd      	bne.n	8001618 <_malloc_r+0x64>
 800165c:	e7cf      	b.n	80015fe <_malloc_r+0x4a>
 800165e:	bf00      	nop
 8001660:	20000090 	.word	0x20000090
 8001664:	20000094 	.word	0x20000094

08001668 <__sfputc_r>:
 8001668:	6893      	ldr	r3, [r2, #8]
 800166a:	b410      	push	{r4}
 800166c:	3b01      	subs	r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	6093      	str	r3, [r2, #8]
 8001672:	da07      	bge.n	8001684 <__sfputc_r+0x1c>
 8001674:	6994      	ldr	r4, [r2, #24]
 8001676:	42a3      	cmp	r3, r4
 8001678:	db01      	blt.n	800167e <__sfputc_r+0x16>
 800167a:	290a      	cmp	r1, #10
 800167c:	d102      	bne.n	8001684 <__sfputc_r+0x1c>
 800167e:	bc10      	pop	{r4}
 8001680:	f000 bb34 	b.w	8001cec <__swbuf_r>
 8001684:	6813      	ldr	r3, [r2, #0]
 8001686:	1c58      	adds	r0, r3, #1
 8001688:	6010      	str	r0, [r2, #0]
 800168a:	7019      	strb	r1, [r3, #0]
 800168c:	4608      	mov	r0, r1
 800168e:	bc10      	pop	{r4}
 8001690:	4770      	bx	lr

08001692 <__sfputs_r>:
 8001692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001694:	4606      	mov	r6, r0
 8001696:	460f      	mov	r7, r1
 8001698:	4614      	mov	r4, r2
 800169a:	18d5      	adds	r5, r2, r3
 800169c:	42ac      	cmp	r4, r5
 800169e:	d101      	bne.n	80016a4 <__sfputs_r+0x12>
 80016a0:	2000      	movs	r0, #0
 80016a2:	e007      	b.n	80016b4 <__sfputs_r+0x22>
 80016a4:	463a      	mov	r2, r7
 80016a6:	4630      	mov	r0, r6
 80016a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ac:	f7ff ffdc 	bl	8001668 <__sfputc_r>
 80016b0:	1c43      	adds	r3, r0, #1
 80016b2:	d1f3      	bne.n	800169c <__sfputs_r+0xa>
 80016b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016b8 <_vfiprintf_r>:
 80016b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016bc:	460d      	mov	r5, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	4698      	mov	r8, r3
 80016c2:	4606      	mov	r6, r0
 80016c4:	b09d      	sub	sp, #116	; 0x74
 80016c6:	b118      	cbz	r0, 80016d0 <_vfiprintf_r+0x18>
 80016c8:	6983      	ldr	r3, [r0, #24]
 80016ca:	b90b      	cbnz	r3, 80016d0 <_vfiprintf_r+0x18>
 80016cc:	f7ff fed2 	bl	8001474 <__sinit>
 80016d0:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <_vfiprintf_r+0x240>)
 80016d2:	429d      	cmp	r5, r3
 80016d4:	d11b      	bne.n	800170e <_vfiprintf_r+0x56>
 80016d6:	6875      	ldr	r5, [r6, #4]
 80016d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016da:	07d9      	lsls	r1, r3, #31
 80016dc:	d405      	bmi.n	80016ea <_vfiprintf_r+0x32>
 80016de:	89ab      	ldrh	r3, [r5, #12]
 80016e0:	059a      	lsls	r2, r3, #22
 80016e2:	d402      	bmi.n	80016ea <_vfiprintf_r+0x32>
 80016e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016e6:	f7ff ff63 	bl	80015b0 <__retarget_lock_acquire_recursive>
 80016ea:	89ab      	ldrh	r3, [r5, #12]
 80016ec:	071b      	lsls	r3, r3, #28
 80016ee:	d501      	bpl.n	80016f4 <_vfiprintf_r+0x3c>
 80016f0:	692b      	ldr	r3, [r5, #16]
 80016f2:	b9eb      	cbnz	r3, 8001730 <_vfiprintf_r+0x78>
 80016f4:	4629      	mov	r1, r5
 80016f6:	4630      	mov	r0, r6
 80016f8:	f000 fb5c 	bl	8001db4 <__swsetup_r>
 80016fc:	b1c0      	cbz	r0, 8001730 <_vfiprintf_r+0x78>
 80016fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001700:	07dc      	lsls	r4, r3, #31
 8001702:	d50e      	bpl.n	8001722 <_vfiprintf_r+0x6a>
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001708:	b01d      	add	sp, #116	; 0x74
 800170a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <_vfiprintf_r+0x244>)
 8001710:	429d      	cmp	r5, r3
 8001712:	d101      	bne.n	8001718 <_vfiprintf_r+0x60>
 8001714:	68b5      	ldr	r5, [r6, #8]
 8001716:	e7df      	b.n	80016d8 <_vfiprintf_r+0x20>
 8001718:	4b79      	ldr	r3, [pc, #484]	; (8001900 <_vfiprintf_r+0x248>)
 800171a:	429d      	cmp	r5, r3
 800171c:	bf08      	it	eq
 800171e:	68f5      	ldreq	r5, [r6, #12]
 8001720:	e7da      	b.n	80016d8 <_vfiprintf_r+0x20>
 8001722:	89ab      	ldrh	r3, [r5, #12]
 8001724:	0598      	lsls	r0, r3, #22
 8001726:	d4ed      	bmi.n	8001704 <_vfiprintf_r+0x4c>
 8001728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800172a:	f7ff ff42 	bl	80015b2 <__retarget_lock_release_recursive>
 800172e:	e7e9      	b.n	8001704 <_vfiprintf_r+0x4c>
 8001730:	2300      	movs	r3, #0
 8001732:	9309      	str	r3, [sp, #36]	; 0x24
 8001734:	2320      	movs	r3, #32
 8001736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800173a:	2330      	movs	r3, #48	; 0x30
 800173c:	f04f 0901 	mov.w	r9, #1
 8001740:	f8cd 800c 	str.w	r8, [sp, #12]
 8001744:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001904 <_vfiprintf_r+0x24c>
 8001748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800174c:	4623      	mov	r3, r4
 800174e:	469a      	mov	sl, r3
 8001750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001754:	b10a      	cbz	r2, 800175a <_vfiprintf_r+0xa2>
 8001756:	2a25      	cmp	r2, #37	; 0x25
 8001758:	d1f9      	bne.n	800174e <_vfiprintf_r+0x96>
 800175a:	ebba 0b04 	subs.w	fp, sl, r4
 800175e:	d00b      	beq.n	8001778 <_vfiprintf_r+0xc0>
 8001760:	465b      	mov	r3, fp
 8001762:	4622      	mov	r2, r4
 8001764:	4629      	mov	r1, r5
 8001766:	4630      	mov	r0, r6
 8001768:	f7ff ff93 	bl	8001692 <__sfputs_r>
 800176c:	3001      	adds	r0, #1
 800176e:	f000 80aa 	beq.w	80018c6 <_vfiprintf_r+0x20e>
 8001772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001774:	445a      	add	r2, fp
 8001776:	9209      	str	r2, [sp, #36]	; 0x24
 8001778:	f89a 3000 	ldrb.w	r3, [sl]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a2 	beq.w	80018c6 <_vfiprintf_r+0x20e>
 8001782:	2300      	movs	r3, #0
 8001784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800178c:	f10a 0a01 	add.w	sl, sl, #1
 8001790:	9304      	str	r3, [sp, #16]
 8001792:	9307      	str	r3, [sp, #28]
 8001794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001798:	931a      	str	r3, [sp, #104]	; 0x68
 800179a:	4654      	mov	r4, sl
 800179c:	2205      	movs	r2, #5
 800179e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a2:	4858      	ldr	r0, [pc, #352]	; (8001904 <_vfiprintf_r+0x24c>)
 80017a4:	f000 fcbc 	bl	8002120 <memchr>
 80017a8:	9a04      	ldr	r2, [sp, #16]
 80017aa:	b9d8      	cbnz	r0, 80017e4 <_vfiprintf_r+0x12c>
 80017ac:	06d1      	lsls	r1, r2, #27
 80017ae:	bf44      	itt	mi
 80017b0:	2320      	movmi	r3, #32
 80017b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017b6:	0713      	lsls	r3, r2, #28
 80017b8:	bf44      	itt	mi
 80017ba:	232b      	movmi	r3, #43	; 0x2b
 80017bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017c0:	f89a 3000 	ldrb.w	r3, [sl]
 80017c4:	2b2a      	cmp	r3, #42	; 0x2a
 80017c6:	d015      	beq.n	80017f4 <_vfiprintf_r+0x13c>
 80017c8:	4654      	mov	r4, sl
 80017ca:	2000      	movs	r0, #0
 80017cc:	f04f 0c0a 	mov.w	ip, #10
 80017d0:	9a07      	ldr	r2, [sp, #28]
 80017d2:	4621      	mov	r1, r4
 80017d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017d8:	3b30      	subs	r3, #48	; 0x30
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d94e      	bls.n	800187c <_vfiprintf_r+0x1c4>
 80017de:	b1b0      	cbz	r0, 800180e <_vfiprintf_r+0x156>
 80017e0:	9207      	str	r2, [sp, #28]
 80017e2:	e014      	b.n	800180e <_vfiprintf_r+0x156>
 80017e4:	eba0 0308 	sub.w	r3, r0, r8
 80017e8:	fa09 f303 	lsl.w	r3, r9, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	46a2      	mov	sl, r4
 80017f0:	9304      	str	r3, [sp, #16]
 80017f2:	e7d2      	b.n	800179a <_vfiprintf_r+0xe2>
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	1d19      	adds	r1, r3, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	9103      	str	r1, [sp, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bfbb      	ittet	lt
 8001800:	425b      	neglt	r3, r3
 8001802:	f042 0202 	orrlt.w	r2, r2, #2
 8001806:	9307      	strge	r3, [sp, #28]
 8001808:	9307      	strlt	r3, [sp, #28]
 800180a:	bfb8      	it	lt
 800180c:	9204      	strlt	r2, [sp, #16]
 800180e:	7823      	ldrb	r3, [r4, #0]
 8001810:	2b2e      	cmp	r3, #46	; 0x2e
 8001812:	d10c      	bne.n	800182e <_vfiprintf_r+0x176>
 8001814:	7863      	ldrb	r3, [r4, #1]
 8001816:	2b2a      	cmp	r3, #42	; 0x2a
 8001818:	d135      	bne.n	8001886 <_vfiprintf_r+0x1ce>
 800181a:	9b03      	ldr	r3, [sp, #12]
 800181c:	3402      	adds	r4, #2
 800181e:	1d1a      	adds	r2, r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	9203      	str	r2, [sp, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	bfb8      	it	lt
 8001828:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800182c:	9305      	str	r3, [sp, #20]
 800182e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001914 <_vfiprintf_r+0x25c>
 8001832:	2203      	movs	r2, #3
 8001834:	4650      	mov	r0, sl
 8001836:	7821      	ldrb	r1, [r4, #0]
 8001838:	f000 fc72 	bl	8002120 <memchr>
 800183c:	b140      	cbz	r0, 8001850 <_vfiprintf_r+0x198>
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	eba0 000a 	sub.w	r0, r0, sl
 8001844:	fa03 f000 	lsl.w	r0, r3, r0
 8001848:	9b04      	ldr	r3, [sp, #16]
 800184a:	3401      	adds	r4, #1
 800184c:	4303      	orrs	r3, r0
 800184e:	9304      	str	r3, [sp, #16]
 8001850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001854:	2206      	movs	r2, #6
 8001856:	482c      	ldr	r0, [pc, #176]	; (8001908 <_vfiprintf_r+0x250>)
 8001858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800185c:	f000 fc60 	bl	8002120 <memchr>
 8001860:	2800      	cmp	r0, #0
 8001862:	d03f      	beq.n	80018e4 <_vfiprintf_r+0x22c>
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <_vfiprintf_r+0x254>)
 8001866:	bb1b      	cbnz	r3, 80018b0 <_vfiprintf_r+0x1f8>
 8001868:	9b03      	ldr	r3, [sp, #12]
 800186a:	3307      	adds	r3, #7
 800186c:	f023 0307 	bic.w	r3, r3, #7
 8001870:	3308      	adds	r3, #8
 8001872:	9303      	str	r3, [sp, #12]
 8001874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001876:	443b      	add	r3, r7
 8001878:	9309      	str	r3, [sp, #36]	; 0x24
 800187a:	e767      	b.n	800174c <_vfiprintf_r+0x94>
 800187c:	460c      	mov	r4, r1
 800187e:	2001      	movs	r0, #1
 8001880:	fb0c 3202 	mla	r2, ip, r2, r3
 8001884:	e7a5      	b.n	80017d2 <_vfiprintf_r+0x11a>
 8001886:	2300      	movs	r3, #0
 8001888:	f04f 0c0a 	mov.w	ip, #10
 800188c:	4619      	mov	r1, r3
 800188e:	3401      	adds	r4, #1
 8001890:	9305      	str	r3, [sp, #20]
 8001892:	4620      	mov	r0, r4
 8001894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001898:	3a30      	subs	r2, #48	; 0x30
 800189a:	2a09      	cmp	r2, #9
 800189c:	d903      	bls.n	80018a6 <_vfiprintf_r+0x1ee>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0c5      	beq.n	800182e <_vfiprintf_r+0x176>
 80018a2:	9105      	str	r1, [sp, #20]
 80018a4:	e7c3      	b.n	800182e <_vfiprintf_r+0x176>
 80018a6:	4604      	mov	r4, r0
 80018a8:	2301      	movs	r3, #1
 80018aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80018ae:	e7f0      	b.n	8001892 <_vfiprintf_r+0x1da>
 80018b0:	ab03      	add	r3, sp, #12
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	462a      	mov	r2, r5
 80018b6:	4630      	mov	r0, r6
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_vfiprintf_r+0x258>)
 80018ba:	a904      	add	r1, sp, #16
 80018bc:	f3af 8000 	nop.w
 80018c0:	4607      	mov	r7, r0
 80018c2:	1c78      	adds	r0, r7, #1
 80018c4:	d1d6      	bne.n	8001874 <_vfiprintf_r+0x1bc>
 80018c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018c8:	07d9      	lsls	r1, r3, #31
 80018ca:	d405      	bmi.n	80018d8 <_vfiprintf_r+0x220>
 80018cc:	89ab      	ldrh	r3, [r5, #12]
 80018ce:	059a      	lsls	r2, r3, #22
 80018d0:	d402      	bmi.n	80018d8 <_vfiprintf_r+0x220>
 80018d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018d4:	f7ff fe6d 	bl	80015b2 <__retarget_lock_release_recursive>
 80018d8:	89ab      	ldrh	r3, [r5, #12]
 80018da:	065b      	lsls	r3, r3, #25
 80018dc:	f53f af12 	bmi.w	8001704 <_vfiprintf_r+0x4c>
 80018e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018e2:	e711      	b.n	8001708 <_vfiprintf_r+0x50>
 80018e4:	ab03      	add	r3, sp, #12
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	462a      	mov	r2, r5
 80018ea:	4630      	mov	r0, r6
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_vfiprintf_r+0x258>)
 80018ee:	a904      	add	r1, sp, #16
 80018f0:	f000 f882 	bl	80019f8 <_printf_i>
 80018f4:	e7e4      	b.n	80018c0 <_vfiprintf_r+0x208>
 80018f6:	bf00      	nop
 80018f8:	080022bc 	.word	0x080022bc
 80018fc:	080022dc 	.word	0x080022dc
 8001900:	0800229c 	.word	0x0800229c
 8001904:	080022fc 	.word	0x080022fc
 8001908:	08002306 	.word	0x08002306
 800190c:	00000000 	.word	0x00000000
 8001910:	08001693 	.word	0x08001693
 8001914:	08002302 	.word	0x08002302

08001918 <_printf_common>:
 8001918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800191c:	4616      	mov	r6, r2
 800191e:	4699      	mov	r9, r3
 8001920:	688a      	ldr	r2, [r1, #8]
 8001922:	690b      	ldr	r3, [r1, #16]
 8001924:	4607      	mov	r7, r0
 8001926:	4293      	cmp	r3, r2
 8001928:	bfb8      	it	lt
 800192a:	4613      	movlt	r3, r2
 800192c:	6033      	str	r3, [r6, #0]
 800192e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001932:	460c      	mov	r4, r1
 8001934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001938:	b10a      	cbz	r2, 800193e <_printf_common+0x26>
 800193a:	3301      	adds	r3, #1
 800193c:	6033      	str	r3, [r6, #0]
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	0699      	lsls	r1, r3, #26
 8001942:	bf42      	ittt	mi
 8001944:	6833      	ldrmi	r3, [r6, #0]
 8001946:	3302      	addmi	r3, #2
 8001948:	6033      	strmi	r3, [r6, #0]
 800194a:	6825      	ldr	r5, [r4, #0]
 800194c:	f015 0506 	ands.w	r5, r5, #6
 8001950:	d106      	bne.n	8001960 <_printf_common+0x48>
 8001952:	f104 0a19 	add.w	sl, r4, #25
 8001956:	68e3      	ldr	r3, [r4, #12]
 8001958:	6832      	ldr	r2, [r6, #0]
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	42ab      	cmp	r3, r5
 800195e:	dc28      	bgt.n	80019b2 <_printf_common+0x9a>
 8001960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001964:	1e13      	subs	r3, r2, #0
 8001966:	6822      	ldr	r2, [r4, #0]
 8001968:	bf18      	it	ne
 800196a:	2301      	movne	r3, #1
 800196c:	0692      	lsls	r2, r2, #26
 800196e:	d42d      	bmi.n	80019cc <_printf_common+0xb4>
 8001970:	4649      	mov	r1, r9
 8001972:	4638      	mov	r0, r7
 8001974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001978:	47c0      	blx	r8
 800197a:	3001      	adds	r0, #1
 800197c:	d020      	beq.n	80019c0 <_printf_common+0xa8>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	68e5      	ldr	r5, [r4, #12]
 8001982:	f003 0306 	and.w	r3, r3, #6
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf18      	it	ne
 800198a:	2500      	movne	r5, #0
 800198c:	6832      	ldr	r2, [r6, #0]
 800198e:	f04f 0600 	mov.w	r6, #0
 8001992:	68a3      	ldr	r3, [r4, #8]
 8001994:	bf08      	it	eq
 8001996:	1aad      	subeq	r5, r5, r2
 8001998:	6922      	ldr	r2, [r4, #16]
 800199a:	bf08      	it	eq
 800199c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019a0:	4293      	cmp	r3, r2
 80019a2:	bfc4      	itt	gt
 80019a4:	1a9b      	subgt	r3, r3, r2
 80019a6:	18ed      	addgt	r5, r5, r3
 80019a8:	341a      	adds	r4, #26
 80019aa:	42b5      	cmp	r5, r6
 80019ac:	d11a      	bne.n	80019e4 <_printf_common+0xcc>
 80019ae:	2000      	movs	r0, #0
 80019b0:	e008      	b.n	80019c4 <_printf_common+0xac>
 80019b2:	2301      	movs	r3, #1
 80019b4:	4652      	mov	r2, sl
 80019b6:	4649      	mov	r1, r9
 80019b8:	4638      	mov	r0, r7
 80019ba:	47c0      	blx	r8
 80019bc:	3001      	adds	r0, #1
 80019be:	d103      	bne.n	80019c8 <_printf_common+0xb0>
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c8:	3501      	adds	r5, #1
 80019ca:	e7c4      	b.n	8001956 <_printf_common+0x3e>
 80019cc:	2030      	movs	r0, #48	; 0x30
 80019ce:	18e1      	adds	r1, r4, r3
 80019d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019da:	4422      	add	r2, r4
 80019dc:	3302      	adds	r3, #2
 80019de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019e2:	e7c5      	b.n	8001970 <_printf_common+0x58>
 80019e4:	2301      	movs	r3, #1
 80019e6:	4622      	mov	r2, r4
 80019e8:	4649      	mov	r1, r9
 80019ea:	4638      	mov	r0, r7
 80019ec:	47c0      	blx	r8
 80019ee:	3001      	adds	r0, #1
 80019f0:	d0e6      	beq.n	80019c0 <_printf_common+0xa8>
 80019f2:	3601      	adds	r6, #1
 80019f4:	e7d9      	b.n	80019aa <_printf_common+0x92>
	...

080019f8 <_printf_i>:
 80019f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019fc:	460c      	mov	r4, r1
 80019fe:	7e27      	ldrb	r7, [r4, #24]
 8001a00:	4691      	mov	r9, r2
 8001a02:	2f78      	cmp	r7, #120	; 0x78
 8001a04:	4680      	mov	r8, r0
 8001a06:	469a      	mov	sl, r3
 8001a08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a0e:	d807      	bhi.n	8001a20 <_printf_i+0x28>
 8001a10:	2f62      	cmp	r7, #98	; 0x62
 8001a12:	d80a      	bhi.n	8001a2a <_printf_i+0x32>
 8001a14:	2f00      	cmp	r7, #0
 8001a16:	f000 80d9 	beq.w	8001bcc <_printf_i+0x1d4>
 8001a1a:	2f58      	cmp	r7, #88	; 0x58
 8001a1c:	f000 80a4 	beq.w	8001b68 <_printf_i+0x170>
 8001a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a28:	e03a      	b.n	8001aa0 <_printf_i+0xa8>
 8001a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a2e:	2b15      	cmp	r3, #21
 8001a30:	d8f6      	bhi.n	8001a20 <_printf_i+0x28>
 8001a32:	a001      	add	r0, pc, #4	; (adr r0, 8001a38 <_printf_i+0x40>)
 8001a34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001aa5 	.word	0x08001aa5
 8001a40:	08001a21 	.word	0x08001a21
 8001a44:	08001a21 	.word	0x08001a21
 8001a48:	08001a21 	.word	0x08001a21
 8001a4c:	08001a21 	.word	0x08001a21
 8001a50:	08001aa5 	.word	0x08001aa5
 8001a54:	08001a21 	.word	0x08001a21
 8001a58:	08001a21 	.word	0x08001a21
 8001a5c:	08001a21 	.word	0x08001a21
 8001a60:	08001a21 	.word	0x08001a21
 8001a64:	08001bb3 	.word	0x08001bb3
 8001a68:	08001ad5 	.word	0x08001ad5
 8001a6c:	08001b95 	.word	0x08001b95
 8001a70:	08001a21 	.word	0x08001a21
 8001a74:	08001a21 	.word	0x08001a21
 8001a78:	08001bd5 	.word	0x08001bd5
 8001a7c:	08001a21 	.word	0x08001a21
 8001a80:	08001ad5 	.word	0x08001ad5
 8001a84:	08001a21 	.word	0x08001a21
 8001a88:	08001a21 	.word	0x08001a21
 8001a8c:	08001b9d 	.word	0x08001b9d
 8001a90:	680b      	ldr	r3, [r1, #0]
 8001a92:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a96:	1d1a      	adds	r2, r3, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	600a      	str	r2, [r1, #0]
 8001a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0a4      	b.n	8001bee <_printf_i+0x1f6>
 8001aa4:	6825      	ldr	r5, [r4, #0]
 8001aa6:	6808      	ldr	r0, [r1, #0]
 8001aa8:	062e      	lsls	r6, r5, #24
 8001aaa:	f100 0304 	add.w	r3, r0, #4
 8001aae:	d50a      	bpl.n	8001ac6 <_printf_i+0xce>
 8001ab0:	6805      	ldr	r5, [r0, #0]
 8001ab2:	600b      	str	r3, [r1, #0]
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	da03      	bge.n	8001ac0 <_printf_i+0xc8>
 8001ab8:	232d      	movs	r3, #45	; 0x2d
 8001aba:	426d      	negs	r5, r5
 8001abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	485e      	ldr	r0, [pc, #376]	; (8001c3c <_printf_i+0x244>)
 8001ac4:	e019      	b.n	8001afa <_printf_i+0x102>
 8001ac6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001aca:	6805      	ldr	r5, [r0, #0]
 8001acc:	600b      	str	r3, [r1, #0]
 8001ace:	bf18      	it	ne
 8001ad0:	b22d      	sxthne	r5, r5
 8001ad2:	e7ef      	b.n	8001ab4 <_printf_i+0xbc>
 8001ad4:	680b      	ldr	r3, [r1, #0]
 8001ad6:	6825      	ldr	r5, [r4, #0]
 8001ad8:	1d18      	adds	r0, r3, #4
 8001ada:	6008      	str	r0, [r1, #0]
 8001adc:	0628      	lsls	r0, r5, #24
 8001ade:	d501      	bpl.n	8001ae4 <_printf_i+0xec>
 8001ae0:	681d      	ldr	r5, [r3, #0]
 8001ae2:	e002      	b.n	8001aea <_printf_i+0xf2>
 8001ae4:	0669      	lsls	r1, r5, #25
 8001ae6:	d5fb      	bpl.n	8001ae0 <_printf_i+0xe8>
 8001ae8:	881d      	ldrh	r5, [r3, #0]
 8001aea:	2f6f      	cmp	r7, #111	; 0x6f
 8001aec:	bf0c      	ite	eq
 8001aee:	2308      	moveq	r3, #8
 8001af0:	230a      	movne	r3, #10
 8001af2:	4852      	ldr	r0, [pc, #328]	; (8001c3c <_printf_i+0x244>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001afa:	6866      	ldr	r6, [r4, #4]
 8001afc:	2e00      	cmp	r6, #0
 8001afe:	bfa8      	it	ge
 8001b00:	6821      	ldrge	r1, [r4, #0]
 8001b02:	60a6      	str	r6, [r4, #8]
 8001b04:	bfa4      	itt	ge
 8001b06:	f021 0104 	bicge.w	r1, r1, #4
 8001b0a:	6021      	strge	r1, [r4, #0]
 8001b0c:	b90d      	cbnz	r5, 8001b12 <_printf_i+0x11a>
 8001b0e:	2e00      	cmp	r6, #0
 8001b10:	d04d      	beq.n	8001bae <_printf_i+0x1b6>
 8001b12:	4616      	mov	r6, r2
 8001b14:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b18:	fb03 5711 	mls	r7, r3, r1, r5
 8001b1c:	5dc7      	ldrb	r7, [r0, r7]
 8001b1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b22:	462f      	mov	r7, r5
 8001b24:	42bb      	cmp	r3, r7
 8001b26:	460d      	mov	r5, r1
 8001b28:	d9f4      	bls.n	8001b14 <_printf_i+0x11c>
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d10b      	bne.n	8001b46 <_printf_i+0x14e>
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	07df      	lsls	r7, r3, #31
 8001b32:	d508      	bpl.n	8001b46 <_printf_i+0x14e>
 8001b34:	6923      	ldr	r3, [r4, #16]
 8001b36:	6861      	ldr	r1, [r4, #4]
 8001b38:	4299      	cmp	r1, r3
 8001b3a:	bfde      	ittt	le
 8001b3c:	2330      	movle	r3, #48	; 0x30
 8001b3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b42:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001b46:	1b92      	subs	r2, r2, r6
 8001b48:	6122      	str	r2, [r4, #16]
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	4640      	mov	r0, r8
 8001b50:	f8cd a000 	str.w	sl, [sp]
 8001b54:	aa03      	add	r2, sp, #12
 8001b56:	f7ff fedf 	bl	8001918 <_printf_common>
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	d14c      	bne.n	8001bf8 <_printf_i+0x200>
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b62:	b004      	add	sp, #16
 8001b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b68:	4834      	ldr	r0, [pc, #208]	; (8001c3c <_printf_i+0x244>)
 8001b6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b6e:	680e      	ldr	r6, [r1, #0]
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f856 5b04 	ldr.w	r5, [r6], #4
 8001b76:	061f      	lsls	r7, r3, #24
 8001b78:	600e      	str	r6, [r1, #0]
 8001b7a:	d514      	bpl.n	8001ba6 <_printf_i+0x1ae>
 8001b7c:	07d9      	lsls	r1, r3, #31
 8001b7e:	bf44      	itt	mi
 8001b80:	f043 0320 	orrmi.w	r3, r3, #32
 8001b84:	6023      	strmi	r3, [r4, #0]
 8001b86:	b91d      	cbnz	r5, 8001b90 <_printf_i+0x198>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	f023 0320 	bic.w	r3, r3, #32
 8001b8e:	6023      	str	r3, [r4, #0]
 8001b90:	2310      	movs	r3, #16
 8001b92:	e7af      	b.n	8001af4 <_printf_i+0xfc>
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	f043 0320 	orr.w	r3, r3, #32
 8001b9a:	6023      	str	r3, [r4, #0]
 8001b9c:	2378      	movs	r3, #120	; 0x78
 8001b9e:	4828      	ldr	r0, [pc, #160]	; (8001c40 <_printf_i+0x248>)
 8001ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ba4:	e7e3      	b.n	8001b6e <_printf_i+0x176>
 8001ba6:	065e      	lsls	r6, r3, #25
 8001ba8:	bf48      	it	mi
 8001baa:	b2ad      	uxthmi	r5, r5
 8001bac:	e7e6      	b.n	8001b7c <_printf_i+0x184>
 8001bae:	4616      	mov	r6, r2
 8001bb0:	e7bb      	b.n	8001b2a <_printf_i+0x132>
 8001bb2:	680b      	ldr	r3, [r1, #0]
 8001bb4:	6826      	ldr	r6, [r4, #0]
 8001bb6:	1d1d      	adds	r5, r3, #4
 8001bb8:	6960      	ldr	r0, [r4, #20]
 8001bba:	600d      	str	r5, [r1, #0]
 8001bbc:	0635      	lsls	r5, r6, #24
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	d501      	bpl.n	8001bc6 <_printf_i+0x1ce>
 8001bc2:	6018      	str	r0, [r3, #0]
 8001bc4:	e002      	b.n	8001bcc <_printf_i+0x1d4>
 8001bc6:	0671      	lsls	r1, r6, #25
 8001bc8:	d5fb      	bpl.n	8001bc2 <_printf_i+0x1ca>
 8001bca:	8018      	strh	r0, [r3, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4616      	mov	r6, r2
 8001bd0:	6123      	str	r3, [r4, #16]
 8001bd2:	e7ba      	b.n	8001b4a <_printf_i+0x152>
 8001bd4:	680b      	ldr	r3, [r1, #0]
 8001bd6:	1d1a      	adds	r2, r3, #4
 8001bd8:	600a      	str	r2, [r1, #0]
 8001bda:	681e      	ldr	r6, [r3, #0]
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4630      	mov	r0, r6
 8001be0:	6862      	ldr	r2, [r4, #4]
 8001be2:	f000 fa9d 	bl	8002120 <memchr>
 8001be6:	b108      	cbz	r0, 8001bec <_printf_i+0x1f4>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	6060      	str	r0, [r4, #4]
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	6123      	str	r3, [r4, #16]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bf6:	e7a8      	b.n	8001b4a <_printf_i+0x152>
 8001bf8:	4632      	mov	r2, r6
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	4640      	mov	r0, r8
 8001bfe:	6923      	ldr	r3, [r4, #16]
 8001c00:	47d0      	blx	sl
 8001c02:	3001      	adds	r0, #1
 8001c04:	d0ab      	beq.n	8001b5e <_printf_i+0x166>
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	079b      	lsls	r3, r3, #30
 8001c0a:	d413      	bmi.n	8001c34 <_printf_i+0x23c>
 8001c0c:	68e0      	ldr	r0, [r4, #12]
 8001c0e:	9b03      	ldr	r3, [sp, #12]
 8001c10:	4298      	cmp	r0, r3
 8001c12:	bfb8      	it	lt
 8001c14:	4618      	movlt	r0, r3
 8001c16:	e7a4      	b.n	8001b62 <_printf_i+0x16a>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	4632      	mov	r2, r6
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	4640      	mov	r0, r8
 8001c20:	47d0      	blx	sl
 8001c22:	3001      	adds	r0, #1
 8001c24:	d09b      	beq.n	8001b5e <_printf_i+0x166>
 8001c26:	3501      	adds	r5, #1
 8001c28:	68e3      	ldr	r3, [r4, #12]
 8001c2a:	9903      	ldr	r1, [sp, #12]
 8001c2c:	1a5b      	subs	r3, r3, r1
 8001c2e:	42ab      	cmp	r3, r5
 8001c30:	dcf2      	bgt.n	8001c18 <_printf_i+0x220>
 8001c32:	e7eb      	b.n	8001c0c <_printf_i+0x214>
 8001c34:	2500      	movs	r5, #0
 8001c36:	f104 0619 	add.w	r6, r4, #25
 8001c3a:	e7f5      	b.n	8001c28 <_printf_i+0x230>
 8001c3c:	0800230d 	.word	0x0800230d
 8001c40:	0800231e 	.word	0x0800231e

08001c44 <_sbrk_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	2300      	movs	r3, #0
 8001c48:	4d05      	ldr	r5, [pc, #20]	; (8001c60 <_sbrk_r+0x1c>)
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	f7fe fc04 	bl	800045c <_sbrk>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_sbrk_r+0x1a>
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_sbrk_r+0x1a>
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	200000a8 	.word	0x200000a8

08001c64 <__sread>:
 8001c64:	b510      	push	{r4, lr}
 8001c66:	460c      	mov	r4, r1
 8001c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6c:	f000 fabe 	bl	80021ec <_read_r>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	bfab      	itete	ge
 8001c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c76:	89a3      	ldrhlt	r3, [r4, #12]
 8001c78:	181b      	addge	r3, r3, r0
 8001c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c7e:	bfac      	ite	ge
 8001c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c82:	81a3      	strhlt	r3, [r4, #12]
 8001c84:	bd10      	pop	{r4, pc}

08001c86 <__swrite>:
 8001c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8a:	461f      	mov	r7, r3
 8001c8c:	898b      	ldrh	r3, [r1, #12]
 8001c8e:	4605      	mov	r5, r0
 8001c90:	05db      	lsls	r3, r3, #23
 8001c92:	460c      	mov	r4, r1
 8001c94:	4616      	mov	r6, r2
 8001c96:	d505      	bpl.n	8001ca4 <__swrite+0x1e>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca0:	f000 f9c8 	bl	8002034 <_lseek_r>
 8001ca4:	89a3      	ldrh	r3, [r4, #12]
 8001ca6:	4632      	mov	r2, r6
 8001ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cac:	81a3      	strh	r3, [r4, #12]
 8001cae:	4628      	mov	r0, r5
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cba:	f000 b869 	b.w	8001d90 <_write_r>

08001cbe <__sseek>:
 8001cbe:	b510      	push	{r4, lr}
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cc6:	f000 f9b5 	bl	8002034 <_lseek_r>
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	bf15      	itete	ne
 8001cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cda:	81a3      	strheq	r3, [r4, #12]
 8001cdc:	bf18      	it	ne
 8001cde:	81a3      	strhne	r3, [r4, #12]
 8001ce0:	bd10      	pop	{r4, pc}

08001ce2 <__sclose>:
 8001ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce6:	f000 b8d3 	b.w	8001e90 <_close_r>
	...

08001cec <__swbuf_r>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	460e      	mov	r6, r1
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	4605      	mov	r5, r0
 8001cf4:	b118      	cbz	r0, 8001cfe <__swbuf_r+0x12>
 8001cf6:	6983      	ldr	r3, [r0, #24]
 8001cf8:	b90b      	cbnz	r3, 8001cfe <__swbuf_r+0x12>
 8001cfa:	f7ff fbbb 	bl	8001474 <__sinit>
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <__swbuf_r+0x98>)
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d12b      	bne.n	8001d5c <__swbuf_r+0x70>
 8001d04:	686c      	ldr	r4, [r5, #4]
 8001d06:	69a3      	ldr	r3, [r4, #24]
 8001d08:	60a3      	str	r3, [r4, #8]
 8001d0a:	89a3      	ldrh	r3, [r4, #12]
 8001d0c:	071a      	lsls	r2, r3, #28
 8001d0e:	d52f      	bpl.n	8001d70 <__swbuf_r+0x84>
 8001d10:	6923      	ldr	r3, [r4, #16]
 8001d12:	b36b      	cbz	r3, 8001d70 <__swbuf_r+0x84>
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	6820      	ldr	r0, [r4, #0]
 8001d18:	b2f6      	uxtb	r6, r6
 8001d1a:	1ac0      	subs	r0, r0, r3
 8001d1c:	6963      	ldr	r3, [r4, #20]
 8001d1e:	4637      	mov	r7, r6
 8001d20:	4283      	cmp	r3, r0
 8001d22:	dc04      	bgt.n	8001d2e <__swbuf_r+0x42>
 8001d24:	4621      	mov	r1, r4
 8001d26:	4628      	mov	r0, r5
 8001d28:	f000 f948 	bl	8001fbc <_fflush_r>
 8001d2c:	bb30      	cbnz	r0, 8001d7c <__swbuf_r+0x90>
 8001d2e:	68a3      	ldr	r3, [r4, #8]
 8001d30:	3001      	adds	r0, #1
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60a3      	str	r3, [r4, #8]
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	6022      	str	r2, [r4, #0]
 8001d3c:	701e      	strb	r6, [r3, #0]
 8001d3e:	6963      	ldr	r3, [r4, #20]
 8001d40:	4283      	cmp	r3, r0
 8001d42:	d004      	beq.n	8001d4e <__swbuf_r+0x62>
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	07db      	lsls	r3, r3, #31
 8001d48:	d506      	bpl.n	8001d58 <__swbuf_r+0x6c>
 8001d4a:	2e0a      	cmp	r6, #10
 8001d4c:	d104      	bne.n	8001d58 <__swbuf_r+0x6c>
 8001d4e:	4621      	mov	r1, r4
 8001d50:	4628      	mov	r0, r5
 8001d52:	f000 f933 	bl	8001fbc <_fflush_r>
 8001d56:	b988      	cbnz	r0, 8001d7c <__swbuf_r+0x90>
 8001d58:	4638      	mov	r0, r7
 8001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <__swbuf_r+0x9c>)
 8001d5e:	429c      	cmp	r4, r3
 8001d60:	d101      	bne.n	8001d66 <__swbuf_r+0x7a>
 8001d62:	68ac      	ldr	r4, [r5, #8]
 8001d64:	e7cf      	b.n	8001d06 <__swbuf_r+0x1a>
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <__swbuf_r+0xa0>)
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	bf08      	it	eq
 8001d6c:	68ec      	ldreq	r4, [r5, #12]
 8001d6e:	e7ca      	b.n	8001d06 <__swbuf_r+0x1a>
 8001d70:	4621      	mov	r1, r4
 8001d72:	4628      	mov	r0, r5
 8001d74:	f000 f81e 	bl	8001db4 <__swsetup_r>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d0cb      	beq.n	8001d14 <__swbuf_r+0x28>
 8001d7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001d80:	e7ea      	b.n	8001d58 <__swbuf_r+0x6c>
 8001d82:	bf00      	nop
 8001d84:	080022bc 	.word	0x080022bc
 8001d88:	080022dc 	.word	0x080022dc
 8001d8c:	0800229c 	.word	0x0800229c

08001d90 <_write_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4d05      	ldr	r5, [pc, #20]	; (8001db0 <_write_r+0x20>)
 8001d9c:	602a      	str	r2, [r5, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f7fe fb10 	bl	80003c4 <_write>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d102      	bne.n	8001dae <_write_r+0x1e>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	b103      	cbz	r3, 8001dae <_write_r+0x1e>
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	200000a8 	.word	0x200000a8

08001db4 <__swsetup_r>:
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <__swsetup_r+0xcc>)
 8001db6:	b570      	push	{r4, r5, r6, lr}
 8001db8:	681d      	ldr	r5, [r3, #0]
 8001dba:	4606      	mov	r6, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	b125      	cbz	r5, 8001dca <__swsetup_r+0x16>
 8001dc0:	69ab      	ldr	r3, [r5, #24]
 8001dc2:	b913      	cbnz	r3, 8001dca <__swsetup_r+0x16>
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	f7ff fb55 	bl	8001474 <__sinit>
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <__swsetup_r+0xd0>)
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	d10f      	bne.n	8001df0 <__swsetup_r+0x3c>
 8001dd0:	686c      	ldr	r4, [r5, #4]
 8001dd2:	89a3      	ldrh	r3, [r4, #12]
 8001dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001dd8:	0719      	lsls	r1, r3, #28
 8001dda:	d42c      	bmi.n	8001e36 <__swsetup_r+0x82>
 8001ddc:	06dd      	lsls	r5, r3, #27
 8001dde:	d411      	bmi.n	8001e04 <__swsetup_r+0x50>
 8001de0:	2309      	movs	r3, #9
 8001de2:	6033      	str	r3, [r6, #0]
 8001de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dec:	81a3      	strh	r3, [r4, #12]
 8001dee:	e03e      	b.n	8001e6e <__swsetup_r+0xba>
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <__swsetup_r+0xd4>)
 8001df2:	429c      	cmp	r4, r3
 8001df4:	d101      	bne.n	8001dfa <__swsetup_r+0x46>
 8001df6:	68ac      	ldr	r4, [r5, #8]
 8001df8:	e7eb      	b.n	8001dd2 <__swsetup_r+0x1e>
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <__swsetup_r+0xd8>)
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	bf08      	it	eq
 8001e00:	68ec      	ldreq	r4, [r5, #12]
 8001e02:	e7e6      	b.n	8001dd2 <__swsetup_r+0x1e>
 8001e04:	0758      	lsls	r0, r3, #29
 8001e06:	d512      	bpl.n	8001e2e <__swsetup_r+0x7a>
 8001e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e0a:	b141      	cbz	r1, 8001e1e <__swsetup_r+0x6a>
 8001e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e10:	4299      	cmp	r1, r3
 8001e12:	d002      	beq.n	8001e1a <__swsetup_r+0x66>
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 f99d 	bl	8002154 <_free_r>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e1e:	89a3      	ldrh	r3, [r4, #12]
 8001e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e24:	81a3      	strh	r3, [r4, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	6063      	str	r3, [r4, #4]
 8001e2a:	6923      	ldr	r3, [r4, #16]
 8001e2c:	6023      	str	r3, [r4, #0]
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	81a3      	strh	r3, [r4, #12]
 8001e36:	6923      	ldr	r3, [r4, #16]
 8001e38:	b94b      	cbnz	r3, 8001e4e <__swsetup_r+0x9a>
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	d003      	beq.n	8001e4e <__swsetup_r+0x9a>
 8001e46:	4621      	mov	r1, r4
 8001e48:	4630      	mov	r0, r6
 8001e4a:	f000 f929 	bl	80020a0 <__smakebuf_r>
 8001e4e:	89a0      	ldrh	r0, [r4, #12]
 8001e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e54:	f010 0301 	ands.w	r3, r0, #1
 8001e58:	d00a      	beq.n	8001e70 <__swsetup_r+0xbc>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60a3      	str	r3, [r4, #8]
 8001e5e:	6963      	ldr	r3, [r4, #20]
 8001e60:	425b      	negs	r3, r3
 8001e62:	61a3      	str	r3, [r4, #24]
 8001e64:	6923      	ldr	r3, [r4, #16]
 8001e66:	b943      	cbnz	r3, 8001e7a <__swsetup_r+0xc6>
 8001e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e6c:	d1ba      	bne.n	8001de4 <__swsetup_r+0x30>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	0781      	lsls	r1, r0, #30
 8001e72:	bf58      	it	pl
 8001e74:	6963      	ldrpl	r3, [r4, #20]
 8001e76:	60a3      	str	r3, [r4, #8]
 8001e78:	e7f4      	b.n	8001e64 <__swsetup_r+0xb0>
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e7f7      	b.n	8001e6e <__swsetup_r+0xba>
 8001e7e:	bf00      	nop
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	080022bc 	.word	0x080022bc
 8001e88:	080022dc 	.word	0x080022dc
 8001e8c:	0800229c 	.word	0x0800229c

08001e90 <_close_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	2300      	movs	r3, #0
 8001e94:	4d05      	ldr	r5, [pc, #20]	; (8001eac <_close_r+0x1c>)
 8001e96:	4604      	mov	r4, r0
 8001e98:	4608      	mov	r0, r1
 8001e9a:	602b      	str	r3, [r5, #0]
 8001e9c:	f7fe faae 	bl	80003fc <_close>
 8001ea0:	1c43      	adds	r3, r0, #1
 8001ea2:	d102      	bne.n	8001eaa <_close_r+0x1a>
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	b103      	cbz	r3, 8001eaa <_close_r+0x1a>
 8001ea8:	6023      	str	r3, [r4, #0]
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}
 8001eac:	200000a8 	.word	0x200000a8

08001eb0 <__sflush_r>:
 8001eb0:	898a      	ldrh	r2, [r1, #12]
 8001eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb6:	4605      	mov	r5, r0
 8001eb8:	0710      	lsls	r0, r2, #28
 8001eba:	460c      	mov	r4, r1
 8001ebc:	d458      	bmi.n	8001f70 <__sflush_r+0xc0>
 8001ebe:	684b      	ldr	r3, [r1, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dc05      	bgt.n	8001ed0 <__sflush_r+0x20>
 8001ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dc02      	bgt.n	8001ed0 <__sflush_r+0x20>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ed2:	2e00      	cmp	r6, #0
 8001ed4:	d0f9      	beq.n	8001eca <__sflush_r+0x1a>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001edc:	682f      	ldr	r7, [r5, #0]
 8001ede:	602b      	str	r3, [r5, #0]
 8001ee0:	d032      	beq.n	8001f48 <__sflush_r+0x98>
 8001ee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ee4:	89a3      	ldrh	r3, [r4, #12]
 8001ee6:	075a      	lsls	r2, r3, #29
 8001ee8:	d505      	bpl.n	8001ef6 <__sflush_r+0x46>
 8001eea:	6863      	ldr	r3, [r4, #4]
 8001eec:	1ac0      	subs	r0, r0, r3
 8001eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ef0:	b10b      	cbz	r3, 8001ef6 <__sflush_r+0x46>
 8001ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ef4:	1ac0      	subs	r0, r0, r3
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001efc:	4628      	mov	r0, r5
 8001efe:	6a21      	ldr	r1, [r4, #32]
 8001f00:	47b0      	blx	r6
 8001f02:	1c43      	adds	r3, r0, #1
 8001f04:	89a3      	ldrh	r3, [r4, #12]
 8001f06:	d106      	bne.n	8001f16 <__sflush_r+0x66>
 8001f08:	6829      	ldr	r1, [r5, #0]
 8001f0a:	291d      	cmp	r1, #29
 8001f0c:	d82c      	bhi.n	8001f68 <__sflush_r+0xb8>
 8001f0e:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <__sflush_r+0x108>)
 8001f10:	40ca      	lsrs	r2, r1
 8001f12:	07d6      	lsls	r6, r2, #31
 8001f14:	d528      	bpl.n	8001f68 <__sflush_r+0xb8>
 8001f16:	2200      	movs	r2, #0
 8001f18:	6062      	str	r2, [r4, #4]
 8001f1a:	6922      	ldr	r2, [r4, #16]
 8001f1c:	04d9      	lsls	r1, r3, #19
 8001f1e:	6022      	str	r2, [r4, #0]
 8001f20:	d504      	bpl.n	8001f2c <__sflush_r+0x7c>
 8001f22:	1c42      	adds	r2, r0, #1
 8001f24:	d101      	bne.n	8001f2a <__sflush_r+0x7a>
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	b903      	cbnz	r3, 8001f2c <__sflush_r+0x7c>
 8001f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f2e:	602f      	str	r7, [r5, #0]
 8001f30:	2900      	cmp	r1, #0
 8001f32:	d0ca      	beq.n	8001eca <__sflush_r+0x1a>
 8001f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f38:	4299      	cmp	r1, r3
 8001f3a:	d002      	beq.n	8001f42 <__sflush_r+0x92>
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f000 f909 	bl	8002154 <_free_r>
 8001f42:	2000      	movs	r0, #0
 8001f44:	6360      	str	r0, [r4, #52]	; 0x34
 8001f46:	e7c1      	b.n	8001ecc <__sflush_r+0x1c>
 8001f48:	6a21      	ldr	r1, [r4, #32]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	47b0      	blx	r6
 8001f50:	1c41      	adds	r1, r0, #1
 8001f52:	d1c7      	bne.n	8001ee4 <__sflush_r+0x34>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0c4      	beq.n	8001ee4 <__sflush_r+0x34>
 8001f5a:	2b1d      	cmp	r3, #29
 8001f5c:	d001      	beq.n	8001f62 <__sflush_r+0xb2>
 8001f5e:	2b16      	cmp	r3, #22
 8001f60:	d101      	bne.n	8001f66 <__sflush_r+0xb6>
 8001f62:	602f      	str	r7, [r5, #0]
 8001f64:	e7b1      	b.n	8001eca <__sflush_r+0x1a>
 8001f66:	89a3      	ldrh	r3, [r4, #12]
 8001f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6c:	81a3      	strh	r3, [r4, #12]
 8001f6e:	e7ad      	b.n	8001ecc <__sflush_r+0x1c>
 8001f70:	690f      	ldr	r7, [r1, #16]
 8001f72:	2f00      	cmp	r7, #0
 8001f74:	d0a9      	beq.n	8001eca <__sflush_r+0x1a>
 8001f76:	0793      	lsls	r3, r2, #30
 8001f78:	bf18      	it	ne
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	680e      	ldr	r6, [r1, #0]
 8001f7e:	bf08      	it	eq
 8001f80:	694b      	ldreq	r3, [r1, #20]
 8001f82:	eba6 0807 	sub.w	r8, r6, r7
 8001f86:	600f      	str	r7, [r1, #0]
 8001f88:	608b      	str	r3, [r1, #8]
 8001f8a:	f1b8 0f00 	cmp.w	r8, #0
 8001f8e:	dd9c      	ble.n	8001eca <__sflush_r+0x1a>
 8001f90:	4643      	mov	r3, r8
 8001f92:	463a      	mov	r2, r7
 8001f94:	4628      	mov	r0, r5
 8001f96:	6a21      	ldr	r1, [r4, #32]
 8001f98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f9a:	47b0      	blx	r6
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	dc06      	bgt.n	8001fae <__sflush_r+0xfe>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001faa:	81a3      	strh	r3, [r4, #12]
 8001fac:	e78e      	b.n	8001ecc <__sflush_r+0x1c>
 8001fae:	4407      	add	r7, r0
 8001fb0:	eba8 0800 	sub.w	r8, r8, r0
 8001fb4:	e7e9      	b.n	8001f8a <__sflush_r+0xda>
 8001fb6:	bf00      	nop
 8001fb8:	20400001 	.word	0x20400001

08001fbc <_fflush_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	690b      	ldr	r3, [r1, #16]
 8001fc0:	4605      	mov	r5, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	b913      	cbnz	r3, 8001fcc <_fflush_r+0x10>
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	4628      	mov	r0, r5
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
 8001fcc:	b118      	cbz	r0, 8001fd6 <_fflush_r+0x1a>
 8001fce:	6983      	ldr	r3, [r0, #24]
 8001fd0:	b90b      	cbnz	r3, 8001fd6 <_fflush_r+0x1a>
 8001fd2:	f7ff fa4f 	bl	8001474 <__sinit>
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <_fflush_r+0x6c>)
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	d11b      	bne.n	8002014 <_fflush_r+0x58>
 8001fdc:	686c      	ldr	r4, [r5, #4]
 8001fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ef      	beq.n	8001fc6 <_fflush_r+0xa>
 8001fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fe8:	07d0      	lsls	r0, r2, #31
 8001fea:	d404      	bmi.n	8001ff6 <_fflush_r+0x3a>
 8001fec:	0599      	lsls	r1, r3, #22
 8001fee:	d402      	bmi.n	8001ff6 <_fflush_r+0x3a>
 8001ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ff2:	f7ff fadd 	bl	80015b0 <__retarget_lock_acquire_recursive>
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	f7ff ff59 	bl	8001eb0 <__sflush_r>
 8001ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002000:	4605      	mov	r5, r0
 8002002:	07da      	lsls	r2, r3, #31
 8002004:	d4e0      	bmi.n	8001fc8 <_fflush_r+0xc>
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	059b      	lsls	r3, r3, #22
 800200a:	d4dd      	bmi.n	8001fc8 <_fflush_r+0xc>
 800200c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800200e:	f7ff fad0 	bl	80015b2 <__retarget_lock_release_recursive>
 8002012:	e7d9      	b.n	8001fc8 <_fflush_r+0xc>
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <_fflush_r+0x70>)
 8002016:	429c      	cmp	r4, r3
 8002018:	d101      	bne.n	800201e <_fflush_r+0x62>
 800201a:	68ac      	ldr	r4, [r5, #8]
 800201c:	e7df      	b.n	8001fde <_fflush_r+0x22>
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <_fflush_r+0x74>)
 8002020:	429c      	cmp	r4, r3
 8002022:	bf08      	it	eq
 8002024:	68ec      	ldreq	r4, [r5, #12]
 8002026:	e7da      	b.n	8001fde <_fflush_r+0x22>
 8002028:	080022bc 	.word	0x080022bc
 800202c:	080022dc 	.word	0x080022dc
 8002030:	0800229c 	.word	0x0800229c

08002034 <_lseek_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	2200      	movs	r2, #0
 800203e:	4d05      	ldr	r5, [pc, #20]	; (8002054 <_lseek_r+0x20>)
 8002040:	602a      	str	r2, [r5, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f7fe f9fe 	bl	8000444 <_lseek>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_lseek_r+0x1e>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_lseek_r+0x1e>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	200000a8 	.word	0x200000a8

08002058 <__swhatbuf_r>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	460e      	mov	r6, r1
 800205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002060:	4614      	mov	r4, r2
 8002062:	2900      	cmp	r1, #0
 8002064:	461d      	mov	r5, r3
 8002066:	b096      	sub	sp, #88	; 0x58
 8002068:	da07      	bge.n	800207a <__swhatbuf_r+0x22>
 800206a:	2300      	movs	r3, #0
 800206c:	602b      	str	r3, [r5, #0]
 800206e:	89b3      	ldrh	r3, [r6, #12]
 8002070:	061a      	lsls	r2, r3, #24
 8002072:	d410      	bmi.n	8002096 <__swhatbuf_r+0x3e>
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	e00e      	b.n	8002098 <__swhatbuf_r+0x40>
 800207a:	466a      	mov	r2, sp
 800207c:	f000 f8c8 	bl	8002210 <_fstat_r>
 8002080:	2800      	cmp	r0, #0
 8002082:	dbf2      	blt.n	800206a <__swhatbuf_r+0x12>
 8002084:	9a01      	ldr	r2, [sp, #4]
 8002086:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800208a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800208e:	425a      	negs	r2, r3
 8002090:	415a      	adcs	r2, r3
 8002092:	602a      	str	r2, [r5, #0]
 8002094:	e7ee      	b.n	8002074 <__swhatbuf_r+0x1c>
 8002096:	2340      	movs	r3, #64	; 0x40
 8002098:	2000      	movs	r0, #0
 800209a:	6023      	str	r3, [r4, #0]
 800209c:	b016      	add	sp, #88	; 0x58
 800209e:	bd70      	pop	{r4, r5, r6, pc}

080020a0 <__smakebuf_r>:
 80020a0:	898b      	ldrh	r3, [r1, #12]
 80020a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020a4:	079d      	lsls	r5, r3, #30
 80020a6:	4606      	mov	r6, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	d507      	bpl.n	80020bc <__smakebuf_r+0x1c>
 80020ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	6123      	str	r3, [r4, #16]
 80020b4:	2301      	movs	r3, #1
 80020b6:	6163      	str	r3, [r4, #20]
 80020b8:	b002      	add	sp, #8
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	466a      	mov	r2, sp
 80020be:	ab01      	add	r3, sp, #4
 80020c0:	f7ff ffca 	bl	8002058 <__swhatbuf_r>
 80020c4:	9900      	ldr	r1, [sp, #0]
 80020c6:	4605      	mov	r5, r0
 80020c8:	4630      	mov	r0, r6
 80020ca:	f7ff fa73 	bl	80015b4 <_malloc_r>
 80020ce:	b948      	cbnz	r0, 80020e4 <__smakebuf_r+0x44>
 80020d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020d4:	059a      	lsls	r2, r3, #22
 80020d6:	d4ef      	bmi.n	80020b8 <__smakebuf_r+0x18>
 80020d8:	f023 0303 	bic.w	r3, r3, #3
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	81a3      	strh	r3, [r4, #12]
 80020e2:	e7e3      	b.n	80020ac <__smakebuf_r+0xc>
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <__smakebuf_r+0x7c>)
 80020e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	6020      	str	r0, [r4, #0]
 80020ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f0:	81a3      	strh	r3, [r4, #12]
 80020f2:	9b00      	ldr	r3, [sp, #0]
 80020f4:	6120      	str	r0, [r4, #16]
 80020f6:	6163      	str	r3, [r4, #20]
 80020f8:	9b01      	ldr	r3, [sp, #4]
 80020fa:	b15b      	cbz	r3, 8002114 <__smakebuf_r+0x74>
 80020fc:	4630      	mov	r0, r6
 80020fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002102:	f000 f897 	bl	8002234 <_isatty_r>
 8002106:	b128      	cbz	r0, 8002114 <__smakebuf_r+0x74>
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	81a3      	strh	r3, [r4, #12]
 8002114:	89a0      	ldrh	r0, [r4, #12]
 8002116:	4305      	orrs	r5, r0
 8002118:	81a5      	strh	r5, [r4, #12]
 800211a:	e7cd      	b.n	80020b8 <__smakebuf_r+0x18>
 800211c:	0800140d 	.word	0x0800140d

08002120 <memchr>:
 8002120:	4603      	mov	r3, r0
 8002122:	b510      	push	{r4, lr}
 8002124:	b2c9      	uxtb	r1, r1
 8002126:	4402      	add	r2, r0
 8002128:	4293      	cmp	r3, r2
 800212a:	4618      	mov	r0, r3
 800212c:	d101      	bne.n	8002132 <memchr+0x12>
 800212e:	2000      	movs	r0, #0
 8002130:	e003      	b.n	800213a <memchr+0x1a>
 8002132:	7804      	ldrb	r4, [r0, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	428c      	cmp	r4, r1
 8002138:	d1f6      	bne.n	8002128 <memchr+0x8>
 800213a:	bd10      	pop	{r4, pc}

0800213c <__malloc_lock>:
 800213c:	4801      	ldr	r0, [pc, #4]	; (8002144 <__malloc_lock+0x8>)
 800213e:	f7ff ba37 	b.w	80015b0 <__retarget_lock_acquire_recursive>
 8002142:	bf00      	nop
 8002144:	200000a0 	.word	0x200000a0

08002148 <__malloc_unlock>:
 8002148:	4801      	ldr	r0, [pc, #4]	; (8002150 <__malloc_unlock+0x8>)
 800214a:	f7ff ba32 	b.w	80015b2 <__retarget_lock_release_recursive>
 800214e:	bf00      	nop
 8002150:	200000a0 	.word	0x200000a0

08002154 <_free_r>:
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4605      	mov	r5, r0
 8002158:	2900      	cmp	r1, #0
 800215a:	d043      	beq.n	80021e4 <_free_r+0x90>
 800215c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002160:	1f0c      	subs	r4, r1, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	bfb8      	it	lt
 8002166:	18e4      	addlt	r4, r4, r3
 8002168:	f7ff ffe8 	bl	800213c <__malloc_lock>
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <_free_r+0x94>)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	4610      	mov	r0, r2
 8002172:	b933      	cbnz	r3, 8002182 <_free_r+0x2e>
 8002174:	6063      	str	r3, [r4, #4]
 8002176:	6014      	str	r4, [r2, #0]
 8002178:	4628      	mov	r0, r5
 800217a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800217e:	f7ff bfe3 	b.w	8002148 <__malloc_unlock>
 8002182:	42a3      	cmp	r3, r4
 8002184:	d90a      	bls.n	800219c <_free_r+0x48>
 8002186:	6821      	ldr	r1, [r4, #0]
 8002188:	1862      	adds	r2, r4, r1
 800218a:	4293      	cmp	r3, r2
 800218c:	bf01      	itttt	eq
 800218e:	681a      	ldreq	r2, [r3, #0]
 8002190:	685b      	ldreq	r3, [r3, #4]
 8002192:	1852      	addeq	r2, r2, r1
 8002194:	6022      	streq	r2, [r4, #0]
 8002196:	6063      	str	r3, [r4, #4]
 8002198:	6004      	str	r4, [r0, #0]
 800219a:	e7ed      	b.n	8002178 <_free_r+0x24>
 800219c:	461a      	mov	r2, r3
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	b10b      	cbz	r3, 80021a6 <_free_r+0x52>
 80021a2:	42a3      	cmp	r3, r4
 80021a4:	d9fa      	bls.n	800219c <_free_r+0x48>
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	1850      	adds	r0, r2, r1
 80021aa:	42a0      	cmp	r0, r4
 80021ac:	d10b      	bne.n	80021c6 <_free_r+0x72>
 80021ae:	6820      	ldr	r0, [r4, #0]
 80021b0:	4401      	add	r1, r0
 80021b2:	1850      	adds	r0, r2, r1
 80021b4:	4283      	cmp	r3, r0
 80021b6:	6011      	str	r1, [r2, #0]
 80021b8:	d1de      	bne.n	8002178 <_free_r+0x24>
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4401      	add	r1, r0
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	6053      	str	r3, [r2, #4]
 80021c4:	e7d8      	b.n	8002178 <_free_r+0x24>
 80021c6:	d902      	bls.n	80021ce <_free_r+0x7a>
 80021c8:	230c      	movs	r3, #12
 80021ca:	602b      	str	r3, [r5, #0]
 80021cc:	e7d4      	b.n	8002178 <_free_r+0x24>
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	1821      	adds	r1, r4, r0
 80021d2:	428b      	cmp	r3, r1
 80021d4:	bf01      	itttt	eq
 80021d6:	6819      	ldreq	r1, [r3, #0]
 80021d8:	685b      	ldreq	r3, [r3, #4]
 80021da:	1809      	addeq	r1, r1, r0
 80021dc:	6021      	streq	r1, [r4, #0]
 80021de:	6063      	str	r3, [r4, #4]
 80021e0:	6054      	str	r4, [r2, #4]
 80021e2:	e7c9      	b.n	8002178 <_free_r+0x24>
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	20000090 	.word	0x20000090

080021ec <_read_r>:
 80021ec:	b538      	push	{r3, r4, r5, lr}
 80021ee:	4604      	mov	r4, r0
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	2200      	movs	r2, #0
 80021f6:	4d05      	ldr	r5, [pc, #20]	; (800220c <_read_r+0x20>)
 80021f8:	602a      	str	r2, [r5, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7fe f8c5 	bl	800038a <_read>
 8002200:	1c43      	adds	r3, r0, #1
 8002202:	d102      	bne.n	800220a <_read_r+0x1e>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	b103      	cbz	r3, 800220a <_read_r+0x1e>
 8002208:	6023      	str	r3, [r4, #0]
 800220a:	bd38      	pop	{r3, r4, r5, pc}
 800220c:	200000a8 	.word	0x200000a8

08002210 <_fstat_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	2300      	movs	r3, #0
 8002214:	4d06      	ldr	r5, [pc, #24]	; (8002230 <_fstat_r+0x20>)
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	602b      	str	r3, [r5, #0]
 800221e:	f7fe f8f8 	bl	8000412 <_fstat>
 8002222:	1c43      	adds	r3, r0, #1
 8002224:	d102      	bne.n	800222c <_fstat_r+0x1c>
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	b103      	cbz	r3, 800222c <_fstat_r+0x1c>
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	bd38      	pop	{r3, r4, r5, pc}
 800222e:	bf00      	nop
 8002230:	200000a8 	.word	0x200000a8

08002234 <_isatty_r>:
 8002234:	b538      	push	{r3, r4, r5, lr}
 8002236:	2300      	movs	r3, #0
 8002238:	4d05      	ldr	r5, [pc, #20]	; (8002250 <_isatty_r+0x1c>)
 800223a:	4604      	mov	r4, r0
 800223c:	4608      	mov	r0, r1
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	f7fe f8f6 	bl	8000430 <_isatty>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_isatty_r+0x1a>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_isatty_r+0x1a>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	200000a8 	.word	0x200000a8

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
